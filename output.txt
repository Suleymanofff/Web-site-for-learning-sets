Файл: C:\dev\projects\html\Курсовая работа\node_modules\ipaddr.js

Файл: C:\dev\projects\html\Курсовая работа\static\adminPanel\courses.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Управление курсами — Админ‑панель</title>
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="/static/adminPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="/static/adminPanel/script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="index.html">Панель админа</a>
				<a href="users.html">Пользователи</a>
				<a href="courses.html" class="active">Курсы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="user" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Управление курсами</h1>
			<div class="table-wrapper">
				<table id="coursesTable">
					<thead>
						<tr>
							<th>Название</th>
							<th>Описание</th>
							<th>ID преподавателя</th>
							<th>Дата создания</th>
							<th>Действия</th>
						</tr>
					</thead>
					<tbody id="coursesBody"></tbody>
				</table>
			</div>

			<form id="newCourseForm" class="course-form">
				<input name="title" placeholder="Название курса" required />
				<input name="description" placeholder="Описание курса" required />
				<input
					name="teacher_id"
					type="number"
					placeholder="ID преподавателя"
					required
				/>
				<button type="submit"><i class="fas fa-plus"></i> Добавить курс</button>
			</form>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\adminPanel\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Админ‑панель — Set Learn</title>

		<!-- 1. Инициализация темы -->
		<script src="/static/js/theme-init.js"></script>
		<!-- 2. Общие стили (импорт основной style.css) и иконки -->
		<link rel="stylesheet" href="/static/adminPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<!-- 3. Скрипт админ‑панели -->
		<script src="/static/adminPanel/script.js" defer></script>
	</head>
	<body>
		<!-- Навигационная панель -->
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/adminPanel/index.html" class="active">Панель админа</a>
				<a href="/static/adminPanel/users.html">Пользователи</a>
				<a href="/static/adminPanel/courses.html">Курсы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="user" />
				</div>
			</div>
		</header>

		<!-- Дашборд с плитками -->
		<main class="page-content">
			<h1>Админ‑панель</h1>
			<div class="tiles">
				<a href="users.html" class="card">
					<i class="fas fa-users"></i>
					<span>Управление пользователями</span>
				</a>
				<a href="courses.html" class="card">
					<i class="fas fa-book"></i>
					<span>Управление курсами</span>
				</a>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\adminPanel\script.js
// -----------------------
// 1. Навигация
// -----------------------
function navigate(url) {
	window.location.href = url
}

// -----------------------
// 2. Загрузка аватарки
// -----------------------
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'include' })
		if (!res.ok) return
		const u = await res.json()
		if (u.avatar_path) {
			const img = document.querySelector('.user-icon img')
			if (img) img.src = u.avatar_path
		}
	} catch (err) {
		console.error(err)
	}
}

// -----------------------
// 3. Тема
// -----------------------
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

// -----------------------
// 4. Инициализация
// -----------------------
document.addEventListener('DOMContentLoaded', () => {
	// 4.1. Активная ссылка
	const path = window.location.pathname.split('/').pop()
	document.querySelectorAll('.nav-links a').forEach(link => {
		link.classList.toggle('active', link.getAttribute('href') === path)
	})

	// 4.2. Тема
	const stored = localStorage.getItem('theme')
	const dark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (dark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)
	document.getElementById('theme-toggle').onclick = () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	}

	loadUserIcon()

	// 4.3. Определяем текущую страницу и запускаем нужный модуль
	if (document.getElementById('usersBody')) initUsers()
	if (document.getElementById('coursesBody')) initCourses()
})

// -----------------------
// Управление пользователями
// -----------------------
function initUsers() {
	const tbody = document.getElementById('usersBody')
	fetch('/api/admin/users', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject(r.statusText)))
		.then(arr => {
			arr.forEach(u => {
				const tr = document.createElement('tr')
				tr.innerHTML = `
          <td>${u.email}</td>
          <td>${u.full_name}</td>
          <td>
            <select data-id="${u.id}">
              <option value="student"${
								u.role === 'student' ? ' selected' : ''
							}>student</option>
              <option value="teacher"${
								u.role === 'teacher' ? ' selected' : ''
							}>teacher</option>
              <option value="admin"${
								u.role === 'admin' ? ' selected' : ''
							}>admin</option>
            </select>
          </td>
          <td>${u.is_active ? 'Да' : 'Нет'}</td>
          <td>${new Date(u.last_login).toLocaleString()}</td>
          <td>
            <button class="save-btn" data-id="${u.id}">Сохранить</button>
            <button class="del-btn"  data-id="${u.id}">Удалить</button>
          </td>`
				tbody.appendChild(tr)
			})
		})
		.catch(e => alert('Не удалось загрузить пользователей: ' + e))

	tbody.addEventListener('click', async e => {
		const id = +e.target.dataset.id
		// Сохранить
		if (e.target.classList.contains('save-btn')) {
			const role = tbody.querySelector(`select[data-id="${id}"]`).value
			try {
				const res = await fetch('/api/admin/users', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id, role }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Роль обновлена')
			} catch (err) {
				alert('Ошибка: ' + err.message)
			}
		}
		// Удалить
		if (e.target.classList.contains('del-btn')) {
			if (!confirm('Удалить пользователя?')) return
			try {
				const res = await fetch('/api/admin/users', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id }),
				})
				if (!res.ok) throw new Error(await res.text())
				e.target.closest('tr').remove()
				alert('Пользователь удалён')
			} catch (err) {
				alert('Ошибка: ' + err.message)
			}
		}
	})
}

// -----------------------
// Управление курсами
// -----------------------
function initCourses() {
	const tbody = document.getElementById('coursesBody')
	const form = document.getElementById('newCourseForm')

	// загрузить
	fetch('/api/admin/courses', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject(r.statusText)))
		.then(arr => {
			arr.forEach(c => {
				const tr = document.createElement('tr')
				tr.innerHTML = `
          <td><input class="edit-title"    data-id="${c.id}" value="${
					c.title
				}"></td>
          <td><input class="edit-desc"     data-id="${c.id}" value="${
					c.description
				}"></td>
          <td><input class="edit-teacher"  data-id="${c.id}" value="${
					c.teacher_id
				}"></td>
          <td>${new Date(c.created_at).toLocaleDateString()}</td>
          <td>
            <button class="save-course" data-id="${c.id}">Сохранить</button>
            <button class="del-course"  data-id="${c.id}">Удалить</button>
          </td>`
				tbody.appendChild(tr)
			})
		})
		.catch(e => console.error('Курсы не загружены:', e))

	// добавить
	form.addEventListener('submit', async e => {
		e.preventDefault()
		const fd = new FormData(form)
		const data = {
			title: fd.get('title'),
			description: fd.get('description'),
			teacher_id: +fd.get('teacher_id'),
		}
		try {
			const res = await fetch('/api/admin/courses', {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(data),
			})
			if (!res.ok) throw new Error(await res.text())
			const { id } = await res.json()
			alert('Курс создан, ID=' + id)
			location.reload()
		} catch (err) {
			alert('Ошибка создания курса: ' + err.message)
		}
	})

	// делегирование кнопок
	tbody.addEventListener('click', async e => {
		const id = +e.target.dataset.id
		// update
		if (e.target.classList.contains('save-course')) {
			const title = document.querySelector(`.edit-title[data-id="${id}"]`).value
			const desc = document.querySelector(`.edit-desc[data-id="${id}"]`).value
			const tid = +document.querySelector(`.edit-teacher[data-id="${id}"]`)
				.value
			try {
				const res = await fetch('/api/admin/courses', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						id,
						title,
						description: desc,
						teacher_id: tid,
					}),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Курс обновлён')
			} catch (err) {
				alert('Ошибка: ' + err.message)
			}
		}
		// delete
		if (e.target.classList.contains('del-course')) {
			if (!confirm('Удалить курс?')) return
			try {
				const res = await fetch('/api/admin/courses', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id }),
				})
				if (!res.ok) throw new Error(await res.text())
				e.target.closest('tr').remove()
				alert('Курс удалён')
			} catch (err) {
				alert('Ошибка: ' + err.message)
			}
		}
	})
}

Файл: C:\dev\projects\html\Курсовая работа\static\adminPanel\style.css
/* === RESET & VARIABLES === */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}
:root {
	/* light theme */
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}
body {
	font-family: 'Inter', sans-serif;
	background: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background 0.5s ease, color 0.5s ease;
}

/* === NAVBAR === */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xs) 0;
	transition: color var(--trans);
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	cursor: pointer;
	font-size: 1.25rem;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* === PAGE CONTENT === */
.page-content {
	max-width: 1200px;
	margin: var(--sp-lg) auto;
	padding: 0 var(--sp-md);
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color var(--trans);
}
.page-content h2 {
	margin-bottom: var(--sp-sm);
}

/* === DASHBOARD TILES (index.html) === */
.tiles {
	display: flex;
	flex-wrap: wrap;
	gap: var(--sp-md);
	margin-top: var(--sp-lg);
}
.card {
	flex: 1 1 30%;
	background: var(--primary);
	color: var(--bg);
	text-decoration: none;
	border-radius: var(--radius);
	padding: var(--sp-lg) var(--sp-md);
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: var(--sp-sm);
	font-size: 1.1rem;
	transition: background var(--trans);
}
.card i {
	font-size: 2rem;
}
.card:hover {
	background: #3c3bd1;
}

/* === FORM GRID (new course) === */
.course-form {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) auto;
	gap: var(--sp-sm);
	margin-top: var(--sp-md);
	align-items: end;
}
.course-form input,
.course-form select {
	padding: var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--card-bg);
	color: var(--text);
	transition: border-color var(--trans);
}
.course-form input:focus,
.course-form select:focus {
	outline: none;
	border-color: var(--primary);
}
.course-form button {
	display: flex;
	align-items: center;
	gap: var(--sp-xs);
	padding: var(--sp-sm) var(--sp-md);
	background: var(--primary);
	color: var(--bg);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
}
.course-form button:hover {
	opacity: 0.9;
}

/* === TABLE WRAPPER & TABLE STYLES === */
.table-wrapper {
	margin-top: var(--sp-md);
	overflow-x: auto;
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}
.table-wrapper table {
	width: 100%;
	min-width: 700px;
	border-collapse: collapse;
	table-layout: auto;
}
.table-wrapper th,
.table-wrapper td {
	padding: var(--sp-sm) var(--sp-md);
	text-align: left;
	white-space: nowrap;
}
.table-wrapper thead {
	background: var(--primary);
}
.table-wrapper thead th {
	color: var(--bg);
	font-weight: 600;
}
.table-wrapper thead th:first-child {
	border-top-left-radius: var(--radius);
}
.table-wrapper thead th:last-child {
	border-top-right-radius: var(--radius);
}
.table-wrapper tbody tr:nth-child(odd) {
	background: var(--bg);
}
.table-wrapper tbody tr:nth-child(even) {
	background: var(--border);
}
.table-wrapper tbody tr:hover {
	background: rgba(79, 70, 229, 0.1);
}
.table-wrapper tbody tr:last-child td:first-child {
	border-bottom-left-radius: var(--radius);
}
.table-wrapper tbody tr:last-child td:last-child {
	border-bottom-right-radius: var(--radius);
}

/* === EDITABLE FIELDS === */
input.edit-title,
input.edit-desc,
input.edit-teacher {
	width: 100%;
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--card-bg);
	color: var(--text);
	transition: border-color var(--trans);
}
input.edit-title:focus,
input.edit-desc:focus,
input.edit-teacher:focus {
	outline: none;
	border-color: var(--primary);
	box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

/* === CRUD BUTTONS === */
button.save-btn,
button.save-course,
button.save-btn {
	background: var(--primary);
	color: var(--bg);
	border: none;
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
	margin-right: var(--sp-xs);
}
button.save-btn:hover,
button.save-course:hover {
	opacity: 0.8;
}
button.del-btn,
button.del-course {
	background: transparent;
	border: 1px solid var(--text-muted);
	color: var(--text-muted);
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
}
button.del-btn:hover,
button.del-course:hover {
	opacity: 0.8;
	background: var(--text-muted);
	color: var(--bg);
}

/* === SELECT (roles) === */
.table-wrapper select {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	padding: var(--sp-xs) var(--sp-lg) var(--sp-xs) var(--sp-sm);
	font-size: 0.95rem;
	line-height: 1.3;
	background: var(--card-bg);
	color: var(--text);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	cursor: pointer;
	transition: border-color var(--trans), box-shadow var(--trans);
	background-image: url("data:image/svg+xml,%3Csvg width='10' height='6'%3E%3Cpath d='M0 0l5 6l5-6' stroke='%23999' stroke-width='1.2'/%3E%3C/svg%3E");
	background-repeat: no-repeat;
	background-position: right var(--sp-sm) center;
	background-size: 0.6em;
}
.table-wrapper select:focus {
	outline: none;
	border-color: var(--primary);
	box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

/* === MOBILE ADJUSTMENTS === */
@media (max-width: 600px) {
	.tiles {
		flex-direction: column;
	}
	.table-wrapper,
	.course-form {
		overflow-x: auto;
	}
	.nav-links {
		flex-direction: column;
		gap: var(--sp-xs);
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\adminPanel\users.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Управление пользователями — Админ‑панель</title>
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="/static/adminPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="/static/adminPanel/script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="index.html">Панель админа</a>
				<a href="users.html" class="active">Пользователи</a>
				<a href="courses.html">Курсы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="user" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Управление пользователями</h1>
			<div class="table-wrapper">
				<table id="usersTable">
					<thead>
						<tr>
							<th>Email</th>
							<th>ФИО</th>
							<th>Роль</th>
							<th>Активен</th>
							<th>Последний вход</th>
							<th>Действия</th>
						</tr>
					</thead>
					<tbody id="usersBody"></tbody>
				</table>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\coursePage\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Курс — Set Learn</title>

		<!-- Инициализация темы -->
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="style.css" />
		<script src="script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a href="/static/coursePage/" class="active">курс</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
					>Панель админа</a
				>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<main class="page-container">
			<h1 id="course-title">Загрузка...</h1>
			<section id="theory-section">
				<h2>Теория</h2>
				<div class="cards-list" id="theory-list">Загрузка теории...</div>
			</section>
			<section id="tests-section">
				<h2>Тесты</h2>
				<div class="cards-list" id="tests-list">Загрузка тестов...</div>
			</section>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\coursePage\script.js
function navigate(url) {
	window.location.href = url
}

function getCourseId() {
	const params = new URLSearchParams(window.location.search)
	return params.get('course') || params.get('id')
}

function getToken() {
	const match = document.cookie.match(/token=([^;]+)/)
	return match ? match[1] : null
}

async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null
		const user = await res.json()
		if (user.avatar_path) {
			document.querySelector('.user-icon img').src = user.avatar_path
		}
		if (user.role === 'admin') {
			document.getElementById('nav-admin').style.display = 'inline-block'
		}
		if (user.role === 'teacher') {
			document.getElementById('nav-teacher').style.display = 'inline-block'
		}
		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

function initThemeToggle() {
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)
	const toggle = document.getElementById('theme-toggle')
	if (toggle) {
		toggle.addEventListener('click', () => {
			const next =
				document.documentElement.getAttribute('data-theme') === 'dark'
					? 'light'
					: 'dark'
			document.documentElement.setAttribute('data-theme', next)
			localStorage.setItem('theme', next)
			updateToggleIcon(next)
		})
	}
}

async function loadCoursePage() {
	const courseId = getCourseId()
	if (!courseId) return

	// Загружаем заголовок курса
	try {
		const res = await fetch(`/api/courses/${courseId}`, {
			credentials: 'same-origin',
		})
		if (!res.ok) throw new Error(`Status ${res.status}`)
		const course = await res.json()
		document.getElementById('course-title').textContent = course.title
	} catch (err) {
		console.error('Error loading course:', err)
		document.getElementById('course-title').textContent =
			'Ошибка загрузки курса'
	}

	await loadTheory(courseId)
	await loadTests(courseId)
}

async function loadTheory(courseId) {
	const container = document.getElementById('theory-list')
	container.innerHTML = 'Загрузка теории…'
	try {
		const res = await fetch(`/api/courses/${courseId}/theory`, {
			headers: { Authorization: `Bearer ${getToken()}` },
			credentials: 'same-origin',
		})
		if (!res.ok) throw new Error('Ошибка загрузки теории')
		const data = await res.json()
		container.innerHTML = ''
		data.forEach(item => {
			const div = document.createElement('div')
			div.className = 'card'
			div.innerHTML = `
        <h3>${item.title}</h3>
        <p>${item.summary}</p>
        <button onclick="navigate('/static/theory/index.html?topic=${item.id}')">Читать</button>
      `
			container.appendChild(div)
		})
	} catch (err) {
		console.error(err)
		container.textContent = 'Ошибка при загрузке теории'
	}
}

async function loadTests(courseId) {
	const container = document.getElementById('tests-list')
	container.innerHTML = 'Загрузка тестов…'
	try {
		const res = await fetch(`/api/courses/${courseId}/tests`, {
			headers: { Authorization: `Bearer ${getToken()}` },
			credentials: 'same-origin',
		})
		if (!res.ok) {
			const text = await res.text()
			console.error('Ошибка загрузки тестов:', res.status, text)
			throw new Error('Ошибка загрузки тестов')
		}
		const tests = await res.json()

		container.innerHTML = ''
		if (tests.length === 0) {
			container.textContent = 'Тестов пока нет.'
			return
		}

		tests.forEach(test => {
			const div = document.createElement('div')
			div.className = 'card test-card'
			div.innerHTML = `
        <h3>${test.title}</h3>
        ${test.description ? `<p>${test.description}</p>` : ''}
        <div class="info">Вопросов: ${test.question_count}</div>
        ${
					test.created_at
						? `<div class="info">Создано: ${new Date(
								test.created_at
						  ).toLocaleDateString()}</div>`
						: ''
				}
        <button onclick="navigate('/static/questions/index.html?test=${
					test.id
				}')">
          Пройти тест
        </button>
      `
			container.appendChild(div)
		})
	} catch (err) {
		console.error('Ошибка в loadTests:', err)
		container.textContent = 'Ошибка при загрузке тестов'
	}
}

document.addEventListener('DOMContentLoaded', () => {
	initThemeToggle()
	loadUserIcon()
	loadCoursePage()
})

Файл: C:\dev\projects\html\Курсовая работа\static\coursePage\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	display: flex; /* флекс-контейнер */
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg); /* фон навбара */
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0; /* всегда сверху */
	z-index: 100;
	transition: background-color 0.5s ease;
}

/* Логотип */
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}

/* Ссылки меню */
.nav-links {
	display: flex;
	gap: var(--sp-md);
}

.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xxs) 0;
	transition: color var(--trans);
}

/* Активная ссылка и при наведении */
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	cursor: pointer;
	font-size: 1.25rem;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* Содержимое страницы кроме navbar */
.page-container {
	max-width: 960px;
	margin: 0 auto;
	padding: var(--sp-md);
}

/* Заголовок */
#course-title {
	text-align: center;
	margin: var(--sp-lg) 0;
	font-size: 2rem;
	font-weight: 600;
}

/* Локальный для coursePage */
.cards-list {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
	gap: var(--sp-md);
	margin-bottom: var(--sp-lg);
}
.card {
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	transition: transform var(--trans);
}
.card:hover {
	transform: translateY(-3px);
}
.card h3 {
	margin-bottom: var(--sp-sm);
	font-size: 1.1rem;
	color: var(--text);
}
.card p {
	flex-grow: 1;
	color: var(--text-muted);
	margin-bottom: var(--sp-sm);
}
.card button {
	align-self: flex-end;
	padding: var(--sp-xs) var(--sp-md);
	background: var(--primary);
	color: #fff;
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: filter var(--trans);
}
.card button:hover {
	filter: brightness(0.9);
}

/* Дополнительный отступ для тест‑карточек */
.test-card {
	display: flex;
	flex-direction: column;
}
.card.info {
	font-size: 0.9rem;
	color: var(--text-muted);
	margin-bottom: var(--sp-sm);
}

Файл: C:\dev\projects\html\Курсовая работа\static\courses\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Курсы — Set Learn</title>

		<!-- 1. Инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- Общие стили и скрипт с поддержкой темы -->
		<link rel="stylesheet" href="style.css" />
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигационная панель -->
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/" class="active">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
					>Панель админа</a
				>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Основной контент страницы Курсы -->

		<!-- поисковик -->
		<div class="search-wrapper">
			<input
				id="course-search"
				type="text"
				placeholder="Поиск курса…"
				aria-autocomplete="list"
				aria-controls="suggestions"
			/>
			<ul id="suggestions" role="listbox"></ul>
		</div>

		<main class="page-content">
			<h1></h1>
			<div class="courses-list">Загрузка курсов...</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\courses\script.js
/* -----------------------
   1. Функция навигации
------------------------ */
function navigate(url) {
	// Перенаправляет браузер на указанный URL
	window.location.href = url
}

/* -----------------------
   2. Подгрузка аватарки в навбар
   (теперь возвращает объект user)
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null // не залогинен или другая ошибка
		const user = await res.json()

		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}

		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

/* -----------------------
   3. Обновление иконки темы
------------------------ */
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return

	// Очищаем содержимое кнопки
	btn.innerHTML = ''

	// Создаём элемент изображения
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'

	// Устанавливаем путь к изображению в зависимости от темы
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'

	// Добавляем изображение в кнопку
	btn.appendChild(icon)
}

/* -----------------------
	Утилита поиска
------------------------ */
// function filterCourses(courses, query) {
// 	const q = query.trim().toLowerCase()
// 	if (!q) return []

// 	return courses.filter(course => {
// 		const title = course.title.toLowerCase()
// 		const desc = (course.description || '').toLowerCase()
// 		const tagsText = (course.tags || []).join(' ').toLowerCase()

// 		return title.includes(q) || desc.includes(q) || tagsText.includes(q)
// 	})
// }

function filterCourses(courses, query) {
	const q = query.trim().toLowerCase()
	if (!q) return []

	// 1. Фразовое совпадение: заголовок === запрос
	const exact = courses.filter(c => c.title.toLowerCase() === q)
	if (exact.length) {
		return exact
	}

	// 2. Фильтрация по includes (любая подстрока)
	const bySubstring = courses.filter(
		c =>
			c.title.toLowerCase().includes(q) ||
			(c.description || '').toLowerCase().includes(q) ||
			(c.tags || []).join(' ').toLowerCase().includes(q)
	)
	if (bySubstring.length) {
		return bySubstring
	}

	// 3. Нечёткий (fuzzy) поиск

	function fuzzyMatch(text) {
		let idx = 0
		for (const ch of text) {
			if (ch === q[idx]) {
				idx++
				if (idx === q.length) return true
			}
		}
		return false
	}
	return courses.filter(
		c =>
			fuzzyMatch(c.title.toLowerCase()) ||
			fuzzyMatch((c.description || '').toLowerCase())
	)

	// 4. Если ничего не нашло
	return []
}

/* -----------------------
   Утилита Debounce
------------------------ */
function debounce(fn, delay = 300) {
	let timer
	return function (...args) {
		clearTimeout(timer)
		timer = setTimeout(() => fn.apply(this, args), delay)
	}
}

/* -----------------------
   Загрузка и поиск курсов с сервером и ARIA
------------------------ */
async function loadCourses() {
	const container = document.querySelector('.courses-list')
	const searchInput = document.getElementById('course-search')
	const suggestions = document.getElementById('suggestions')
	const wrapper = document.querySelector('.search-wrapper')
	let currentIdx = -1
	let expanded = false
	const VISIBLE_COUNT = 4
	let allCourses = []
	let filteredCourses = []

	// Кнопка очистки
	const clearBtn = document.createElement('button')
	clearBtn.type = 'button'
	clearBtn.className = 'clear-search'
	clearBtn.textContent = '×'
	searchInput.insertAdjacentElement('afterend', clearBtn)
	clearBtn.addEventListener('click', () => {
		searchInput.value = ''
		suggestions.innerHTML = ''
		wrapper.setAttribute('aria-expanded', 'false')
		resetSearch()
	})

	// Отрисовка карточки
	function renderCard(course) {
		const card = document.createElement('div')
		card.className = 'course-card'
		card.innerHTML = `
			<h2>${course.title}</h2>
			<p>${course.description}</p>
			<div class="info">Тестов: ${course.test_count}</div>
			<button onclick="navigate('/static/coursePage/index.html?course=${course.id}')">Открыть</button>
		`
		container.appendChild(card)
	}

	// Отрисовка списка
	function renderCourses() {
		container.innerHTML = ''
		const list = expanded
			? filteredCourses
			: filteredCourses.slice(0, VISIBLE_COUNT)
		list.forEach(renderCard)

		const btn = document.getElementById('toggle-courses')
		if (filteredCourses.length > VISIBLE_COUNT) {
			btn.style.display = 'block'
			btn.textContent = expanded ? 'Свернуть' : 'Показать больше'
		} else {
			btn.style.display = 'none'
		}
	}

	// Получение курсов с сервера (без поиска)
	async function fetchCourses() {
		const res = await fetch('/api/courses', { credentials: 'same-origin' })
		if (!res.ok) throw new Error(`Ошибка ${res.status}`)
		return await res.json()
	}

	// Сброс поиска
	function resetSearch() {
		filteredCourses = allCourses
		expanded = false
		renderCourses()
	}

	// Поиск по локальному массиву
	function applySearch(text) {
		const query = text.trim()
		if (!query) {
			resetSearch()
			return
		}

		const results = filterCourses(allCourses, query)
		if (results.length) {
			filteredCourses = results
			expanded = true
			renderCourses()
		} else {
			container.innerHTML = '<p>К сожалению такого курса нет.</p>'
			document.getElementById('toggle-courses').style.display = 'none'
		}
	}

	// Подсказки
	function updateSuggestions(text) {
		suggestions.innerHTML = ''
		if (!text) {
			wrapper.setAttribute('aria-expanded', 'false')
			return
		}
		const matches = filterCourses(allCourses, text).slice(0, 10)
		matches.forEach((course, idx) => {
			const li = document.createElement('li')
			li.setAttribute('role', 'option')
			li.id = `suggestion-${idx}`
			const re = new RegExp(`(${text})`, 'i')
			li.innerHTML = course.title.replace(re, '<mark>$1</mark>')
			suggestions.appendChild(li)
		})
		currentIdx = -1
		wrapper.setAttribute('aria-expanded', 'true')
	}

	// Подсветка подсказки
	function highlight(items) {
		items.forEach((li, idx) => {
			li.classList.toggle('active', idx === currentIdx)
			li.setAttribute('aria-selected', idx === currentIdx)
			if (idx === currentIdx) {
				searchInput.setAttribute('aria-activedescendant', li.id)
			}
		})
	}

	// Debounce
	const debouncedSuggest = debounce(text => updateSuggestions(text), 300)

	// Обработчики клавиш
	searchInput.addEventListener('keydown', e => {
		const items = suggestions.querySelectorAll('li')
		if (e.key === 'ArrowDown') {
			e.preventDefault()
			if (!items.length) return
			currentIdx = Math.min(currentIdx + 1, items.length - 1)
			highlight(items)
		} else if (e.key === 'ArrowUp') {
			e.preventDefault()
			if (!items.length) return
			currentIdx = Math.max(currentIdx - 1, 0)
			highlight(items)
		} else if (e.key === 'Escape') {
			suggestions.innerHTML = ''
			currentIdx = -1
			wrapper.setAttribute('aria-expanded', 'false')
		} else if (e.key === 'Enter') {
			e.preventDefault()
			if (currentIdx >= 0 && items[currentIdx]) {
				const title = items[currentIdx].textContent
				searchInput.value = title
				suggestions.innerHTML = ''
				applySearch(title)
			} else if (!searchInput.value.trim()) {
				resetSearch()
			} else {
				applySearch(searchInput.value.trim())
			}
		}
	})

	// Клик по подсказке
	suggestions.addEventListener('click', e => {
		if (e.target.tagName === 'LI') {
			const title = e.target.textContent
			searchInput.value = title
			suggestions.innerHTML = ''
			applySearch(title)
		}
	})

	// По вводу
	searchInput.addEventListener('input', e => {
		const text = e.target.value.trim()
		if (!text) {
			suggestions.innerHTML = ''
			wrapper.setAttribute('aria-expanded', 'false')
			return
		}
		debouncedSuggest(text)
	})

	// Клики вне поля
	document.addEventListener('click', e => {
		if (!searchInput.contains(e.target) && !suggestions.contains(e.target)) {
			suggestions.innerHTML = ''
			currentIdx = -1
			wrapper.setAttribute('aria-expanded', 'false')
		}
	})

	// Кнопка "Показать больше"
	const header = document.querySelector('.page-content h1')
	const toggleBtn = document.createElement('button')
	toggleBtn.id = 'toggle-courses'
	toggleBtn.textContent = 'Показать больше'
	toggleBtn.addEventListener('click', () => {
		expanded = !expanded
		renderCourses()
	})
	header.insertAdjacentElement('afterend', toggleBtn)

	// Загружаем все курсы и стартуем
	try {
		allCourses = await fetchCourses()
		filteredCourses = allCourses
		renderCourses()
	} catch (err) {
		container.innerHTML = `<p>Ошибка загрузки: ${err.message}</p>`
	}
}

document.addEventListener('DOMContentLoaded', () => {
	/* -----------------------
     4. Подсветка активной ссылки
  ------------------------ */
	const path = window.location.pathname
	document.querySelectorAll('.nav-links a').forEach(link => {
		link.classList.toggle('active', path.startsWith(link.getAttribute('href')))
	})

	/* -----------------------
     5. Инициализация темы
  ------------------------ */
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	/* -----------------------
     6. Переключатель темы
  ------------------------ */
	const toggle = document.getElementById('theme-toggle')
	if (toggle) {
		toggle.addEventListener('click', () => {
			const next =
				document.documentElement.getAttribute('data-theme') === 'dark'
					? 'light'
					: 'dark'
			document.documentElement.setAttribute('data-theme', next)
			localStorage.setItem('theme', next)
			updateToggleIcon(next)
		})
	}

	/* -----------------------
     7. Подгрузка аватарки и показа скрытой ссылки‑ссылки
  ------------------------ */
	loadUserIcon().then(user => {
		if (!user) return
		if (user.role === 'admin') {
			const adminTile = document.getElementById('nav-admin')
			if (adminTile) adminTile.style.display = 'flex'
		}
		if (user.role === 'teacher') {
			// 1) в навигации
			const navTeacher = document.getElementById('nav-teacher')
			if (navTeacher) navTeacher.style.display = 'inline-block'
			// 2) на главной странице-плитках
			const teacherTile = document.getElementById('go-to-teacher')
			if (teacherTile) teacherTile.style.display = 'flex'
		}
	})

	// загрузка курсов
	loadCourses()
})

Файл: C:\dev\projects\html\Курсовая работа\static\courses\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	display: flex; /* флекс-контейнер */
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg); /* фон навбара */
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0; /* всегда сверху */
	z-index: 100;
	transition: background-color 0.5s ease;
}

/* Логотип */
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}

/* Ссылки меню */
.nav-links {
	display: flex;
	gap: var(--sp-md);
}

.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xxs) 0;
	transition: color var(--trans);
}

/* Активная ссылка и при наведении */
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	cursor: pointer;
	font-size: 1.25rem;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* PAGE CONTENT */
.page-content {
	max-width: 1200px;
	margin: var(--sp-lg) auto;
	padding: 0 var(--sp-md);
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color 0.5s ease;
}

/* Курсы-карточки */
.courses-list {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
	gap: var(--sp-md);
}
.course-card {
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	transition: transform var(--trans);
}
.course-card:hover {
	transform: translateY(-4px);
}
.course-card h2 {
	font-size: 1.25rem;
	margin-bottom: var(--sp-sm);
}
.course-card p {
	flex-grow: 1;
	margin-bottom: var(--sp-sm);
	color: var(--text-muted);
}
.course-card .info {
	font-size: 0.9rem;
	margin-bottom: var(--sp-md);
	color: var(--text-muted);
}
.course-card button {
	padding: var(--sp-xs) var(--sp-md);
	background: var(--primary);
	color: #fff;
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	align-self: flex-end;
	transition: background var(--trans);
}
.course-card button:hover {
	/* background: darken(var(--primary), 10%); */
	filter: brightness(0.9);
}

/* Responsive */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
	.page-content {
		padding: var(--sp-md);
	}
}

/* Адаптив: на узких экранах постепенно уменьшаем число колонок */
@media (max-width: 1200px) {
	.courses-list {
		grid-template-columns: repeat(3, 1fr);
	}
}
@media (max-width: 900px) {
	.courses-list {
		grid-template-columns: repeat(2, 1fr);
	}
}
@media (max-width: 600px) {
	.courses-list {
		grid-template-columns: 1fr;
	}
}

/* Основной стиль кнопки */
#toggle-courses {
	display: block; /* чтобы кнопка была по центру строки */
	margin: 1rem auto; /* отступ сверху/снизу + центрирование */
	padding: var(--sp-sm) var(--sp-md);
	background-color: var(--primary);
	color: #fff;
	border: none;
	border-radius: var(--radius);
	font-size: 1rem;
	font-weight: 500;
	text-align: center;
	cursor: pointer;
	transition: background-color var(--trans), transform var(--trans);
}

/* При наведении — чуть тёмнее фон */
#toggle-courses:hover {
	opacity: 0.8;
}

/* При фокусе — видимая рамка для accessibility */
#toggle-courses:focus {
	outline: 2px solid var(--primary-light);
	outline-offset: 2px;
}

/* При нажатии — лёгкое «вдавливание» */
#toggle-courses:active {
	transform: scale(0.97);
}

.search-wrapper {
	position: relative;
	max-width: 600px;
	margin: 0 auto;
}

/* поисковая строка */
#course-search {
	width: 100%;
	padding: 0.5rem 1rem;
	font-size: 1rem;
	border: 2px solid var(--primary);
	border-radius: var(--radius);
	outline: none;
}

#suggestions {
	position: absolute;
	top: 100%;
	left: 0;
	right: 0;
	background: white;
	border: 1px solid #ccc;
	border-top: none;
	max-height: 200px;
	overflow-y: auto;
	z-index: 10;
	list-style: none;
	margin: 0;
	padding: 0;
}

#suggestions li {
	padding: 8px 12px;
	cursor: pointer;
}
#suggestions li.active,
#suggestions li:hover {
	background-color: #f0f0ff;
}

.clear-search {
	position: absolute;
	top: 50%;
	right: 0.75em; /* совпадает с правым padding */
	transform: translateY(-50%);
	background: transparent;
	border: none;
	font-size: 1.2em;
	cursor: pointer;
	color: #666;
}

/* контейнер вокруг input должен быть position: relative */
.search-wrapper {
	position: relative;
	max-width: 600px;
	margin: 0 auto; /* по центру */
}

.search-wrapper input {
	width: 100%;
	padding: 0.5em 2.5em 0.5em 0.75em; /* справа место под крестик */
	box-sizing: border-box;
}

.clear-search:hover {
	color: #000;
}

Файл: C:\dev\projects\html\Курсовая работа\static\js\theme-init.js
;(function () {
	// 1) Пробуем взять сохранённую тему
	var stored = localStorage.getItem('theme')
	// 2) Если нет, берём системную
	var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	var theme = stored || (prefersDark ? 'dark' : 'light')
	// 3) Сразу ставим атрибут на <html>
	document.documentElement.setAttribute('data-theme', theme)
})()

Файл: C:\dev\projects\html\Курсовая работа\static\leaderboard\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Пошаговая анимация — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- Общие стили и скрипт с поддержкой светлой/тёмной темы -->
		<link rel="stylesheet" href="style.css" />
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигация -->
		<header class="navbar">
			<!-- Логотип / название сайта -->
			<div class="logo">Set Learn</div>
			<!-- Ссылки меню -->
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
				>
					Панель админа
				</a>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
				<a href="/static/leaderboard/" class="active">Лидерборд</a>
			</nav>
			<!-- Блок с дополнительными действиями -->
			<div class="actions">
				<!-- Кнопка переключения темы -->
				<button id="theme-toggle" aria-label="Переключить тему">
					<img src="/static/img/dark-theme.png" alt="dark-theme-toggle" />
				</button>
				<!-- Иконка пользователя -->
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Контент анимации -->
		<main class="page-content">
			<h1>Лидерборд</h1>
			<!-- Здесь разместите свой контейнер для анимации -->
			<div id="leaderboard-container">
				<!-- Ваша интерактивная анимация -->
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\leaderboard\script.js
/* -----------------------
   1. Функция навигации
------------------------ */
function navigate(url) {
	// Перенаправляет браузер на указанный URL
	window.location.href = url
}

/* -----------------------
   2. Подгрузка аватарки в навбар
   (возвращаем объект user!)  ←!
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null // не залогинен или другая ошибка
		const user = await res.json()

		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}

		return user // ←! возвращаем для проверки роли
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null // ←! на ошибке тоже возвращаем null
	}
}

// Обновляет иконку темы
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	// Очищаем содержимое кнопки
	btn.innerHTML = ''

	// Создаём элемент изображения
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'

	// Устанавливаем путь к изображению в зависимости от темы
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'

	// Добавляем изображение в кнопку
	btn.appendChild(icon)
}

document.addEventListener('DOMContentLoaded', () => {
	// Подсветка активного пункта меню
	const path = window.location.pathname
	document.querySelectorAll('.nav-links a').forEach(link => {
		link.classList.toggle('active', path.startsWith(link.getAttribute('href')))
	})

	// Инициализация темы
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	// Обработчик переключения темы
	document.getElementById('theme-toggle').addEventListener('click', () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	})

	// --- показываем аватар и одновременно проверяем роль ---
	loadUserIcon().then(user => {
		if (!user) return
		if (user.role === 'admin') {
			const adminTile = document.getElementById('nav-admin')
			if (adminTile) adminTile.style.display = 'flex'
		}
		if (user.role === 'teacher') {
			// 1) в навигации
			const navTeacher = document.getElementById('nav-teacher')
			if (navTeacher) navTeacher.style.display = 'inline-block'
			// 2) на главной странице-плитках
			const teacherTile = document.getElementById('go-to-teacher')
			if (teacherTile) teacherTile.style.display = 'flex'
		}
	})

	// TODO: инициализация и запуск анимации в #animation-container
})

Файл: C:\dev\projects\html\Курсовая работа\static\leaderboard\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

:root {
	/* Светлая тема */
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;

	/* Отступы и радиус */
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	/* Тёмная тема */
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background-color: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background-color 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
	transition: background-color 0.5s ease;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	transition: color var(--trans);
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* PAGE CONTENT */
.page-content {
	max-width: 800px;
	margin: var(--sp-md) auto;
	padding: 0 var(--sp-md);
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color 0.5s ease;
}

/* Анимация-контейнер */
#leaderboard-container {
	background-color: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	transition: background-color 0.5s ease, border-color 0.5s ease;
	/* Задайте нужные размеры для вашей анимации */
	height: 400px;
}

/* RESPONSIVE */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
	#animation-container {
		height: 300px;
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\loginPage\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Регистрация/Вход — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- Стили и скрипт с поддержкой светлой/тёмной темы -->
		<link rel="stylesheet" href="style.css" />
		<!-- Font Awesome для иконок соцсетей -->
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему">
					<img src="/static/img/dark-theme.png" alt="dark-theme-toggle" />
				</button>
				<div class="user-icon" onclick="navigate('/profile')">
					<a href="#"><i class="fas fa-user"></i></a>
				</div>
			</div>
		</header>

		<div class="container" id="container">
			<!-- Регистрация -->
			<div class="form-container sign-up-container">
				<form id="registerForm">
					<h1>Создать аккаунт</h1>
					<div class="social-container">
						<a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
						<a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
						<a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
					</div>
					<span>или используйте email для регистрации</span>
					<input type="text" name="name" placeholder="Имя" required />
					<input type="email" name="email" placeholder="Email" required />
					<input
						type="password"
						name="password"
						placeholder="Пароль"
						required
					/>
					<button type="submit">Зарегистрироваться</button>
				</form>
			</div>

			<!-- Вход -->
			<div class="form-container sign-in-container">
				<form id="loginForm">
					<h1>Войти</h1>
					<div class="social-container">
						<a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
						<a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
						<a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
					</div>
					<span>или используйте ваш аккаунт</span>
					<input type="email" name="email" placeholder="Email" required />
					<input
						type="password"
						name="password"
						placeholder="Пароль"
						required
					/>
					<a href="#" class="forgot-password">Забыли пароль?</a>
					<button type="submit">Войти</button>
				</form>
			</div>

			<!-- Оверлей для переключения -->
			<div class="overlay-container">
				<div class="overlay">
					<div class="overlay-panel overlay-left">
						<h1>С возвращением!</h1>
						<p>Для входа используйте ваши данные</p>
						<button class="ghost" id="signIn">Войти</button>
					</div>
					<div class="overlay-panel overlay-right">
						<h1>Привет!</h1>
						<p>Зарегистрируйтесь для начала работы</p>
						<button class="ghost" id="signUp">Регистрация</button>
					</div>
				</div>
			</div>

			<!-- Мобильный переключатель -->
			<div class="mobile-switcher">
				<a href="#" id="mobileSwitchToSignIn">Уже есть аккаунт? Войти</a>
				<a href="#" id="mobileSwitchToSignUp"
					>Нет аккаунта? Зарегистрироваться</a
				>
			</div>
		</div>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\loginPage\script.js
// Навигация (если нужна)
function navigate(url) {
	window.location.href = url
}

/* -----------------------
   2. Подгрузка аватарки в навбар
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return // не залогинен или другая ошибка
		const user = await res.json()

		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}
	} catch (err) {
		console.error('Error loading user icon:', err)
	}
}

// Обновление иконки темы
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	// Очищаем содержимое кнопки
	btn.innerHTML = ''

	// Создаём элемент изображения
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme' // Альтернативный текст для доступности

	// Устанавливаем путь к изображению в зависимости от темы
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'

	// Добавляем изображение в кнопку
	btn.appendChild(icon)
}

document.addEventListener('DOMContentLoaded', () => {
	// Инициализация темы
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)
	document.getElementById('theme-toggle').addEventListener('click', () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	})

	// Переключение панелей
	const container = document.getElementById('container')
	const signUpBtn = document.getElementById('signUp')
	const signInBtn = document.getElementById('signIn')
	const mobileIn = document.getElementById('mobileSwitchToSignIn')
	const mobileUp = document.getElementById('mobileSwitchToSignUp')

	function togglePanel(isSignUp) {
		container.classList.toggle('right-panel-active', isSignUp)
		updateMobileSwitcher()
	}
	function updateMobileSwitcher() {
		const active = container.classList.contains('right-panel-active')
		mobileIn.style.display = active ? 'inline-block' : 'none'
		mobileUp.style.display = active ? 'none' : 'inline-block'
	}
	signUpBtn.addEventListener('click', () => togglePanel(true))
	signInBtn.addEventListener('click', () => togglePanel(false))
	mobileIn.addEventListener('click', e => {
		e.preventDefault()
		togglePanel(false)
	})
	mobileUp.addEventListener('click', e => {
		e.preventDefault()
		togglePanel(true)
	})
	updateMobileSwitcher()

	// Формы регистрации
	document
		.getElementById('registerForm')
		.addEventListener('submit', async e => {
			e.preventDefault()
			const fd = new FormData(e.target)
			const data = {
				name: fd.get('name'),
				email: fd.get('email'),
				password: fd.get('password'),
			}
			try {
				const res = await fetch('/register', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(data),
				})
				if (res.ok) {
					alert('Успешно зарегистрированы')
					togglePanel(false)
				} else {
					alert('Ошибка: ' + (await res.text()))
				}
			} catch {
				alert('Ошибка подключения')
			}
		})

	// Форма входа: отправка с credentials и редирект по роли
	document.getElementById('loginForm').addEventListener('submit', async e => {
		e.preventDefault()
		const fd = new FormData(e.target)
		const data = {
			email: fd.get('email'),
			password: fd.get('password'),
		}
		try {
			const res = await fetch('/login', {
				method: 'POST',
				credentials: 'include', // важно: передать и получить JWT-куку
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(data),
			})
			if (!res.ok) {
				const text = await res.text()
				throw new Error(text || res.statusText)
			}
			const { role } = await res.json()
			// Редирект в зависимости от роли
			if (role === 'admin') {
				window.location.href = '/static/adminPanel/'
			} else if (role === 'teacher') {
				window.location.href = '/static/teacherPanel/'
			} else {
				window.location.href = '/static/mainPage/'
			}
		} catch (err) {
			alert('Ошибка входа: ' + err.message)
		}
	})

	loadUserIcon()
})

// document.addEventListener('DOMContentLoaded', () => {
// 	// Инициализация темы
// 	const stored = localStorage.getItem('theme')
// 	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
// 	const theme = stored || (prefersDark ? 'dark' : 'light')
// 	document.documentElement.setAttribute('data-theme', theme)
// 	updateToggleIcon(theme)
// 	document.getElementById('theme-toggle').addEventListener('click', () => {
// 		const next =
// 			document.documentElement.getAttribute('data-theme') === 'dark'
// 				? 'light'
// 				: 'dark'
// 		document.documentElement.setAttribute('data-theme', next)
// 		localStorage.setItem('theme', next)
// 		updateToggleIcon(next)
// 	})

// 	// Переключение панелей
// 	const container = document.getElementById('container')
// 	const signUpBtn = document.getElementById('signUp')
// 	const signInBtn = document.getElementById('signIn')
// 	const mobileIn = document.getElementById('mobileSwitchToSignIn')
// 	const mobileUp = document.getElementById('mobileSwitchToSignUp')

// 	function togglePanel(isSignUp) {
// 		container.classList.toggle('right-panel-active', isSignUp)
// 		updateMobileSwitcher()
// 	}
// 	function updateMobileSwitcher() {
// 		const active = container.classList.contains('right-panel-active')
// 		mobileIn.style.display = active ? 'inline-block' : 'none'
// 		mobileUp.style.display = active ? 'none' : 'inline-block'
// 	}
// 	signUpBtn.addEventListener('click', () => togglePanel(true))
// 	signInBtn.addEventListener('click', () => togglePanel(false))
// 	mobileIn.addEventListener('click', e => {
// 		e.preventDefault()
// 		togglePanel(false)
// 	})
// 	mobileUp.addEventListener('click', e => {
// 		e.preventDefault()
// 		togglePanel(true)
// 	})
// 	updateMobileSwitcher()

// 	// Формы регистрации/входа
// 	document
// 		.getElementById('registerForm')
// 		.addEventListener('submit', async e => {
// 			e.preventDefault()
// 			const fd = new FormData(e.target)
// 			const data = {
// 				name: fd.get('name'),
// 				email: fd.get('email'),
// 				password: fd.get('password'),
// 			}
// 			try {
// 				const res = await fetch('/register', {
// 					method: 'POST',
// 					headers: { 'Content-Type': 'application/json' },
// 					body: JSON.stringify(data),
// 				})
// 				if (res.ok) {
// 					alert('Успешно зарегистрированы')
// 					togglePanel(false)
// 				} else {
// 					alert('Ошибка: ' + (await res.text()))
// 				}
// 			} catch {
// 				alert('Ошибка подключения')
// 			}
// 		})
// 	document.getElementById('loginForm').addEventListener('submit', async e => {
// 		e.preventDefault()
// 		const fd = new FormData(e.target)
// 		const data = { email: fd.get('email'), password: fd.get('password') }
// 		try {
// 			const res = await fetch('/login', {
// 				method: 'POST',
// 				headers: { 'Content-Type': 'application/json' },
// 				body: JSON.stringify(data),
// 			})
// 			if (res.ok) window.location.href = '/static/mainPage/'
// 			else alert('Ошибка: ' + (await res.text()))
// 		} catch {
// 			alert('Ошибка подключения')
// 		}
// 	})

// 	loadUserIcon()
// })

Файл: C:\dev\projects\html\Курсовая работа\static\loginPage\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #ff4b2b;
	--secondary: #ff416c;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 3rem;
	--radius: 0.5rem;
	--trans: 0.6s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #ff416c;
	--secondary: #ff4b2b;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	background: var(--bg);
	color: var(--text);
	height: 100vh;
	display: flex;
	align-items: center;
	justify-content: center;
	transition: background 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	width: 100%;
	position: absolute;
	top: 0;
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: var(--card-bg);
	padding: var(--sp-sm) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	transition: background 0.5s ease;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon a {
	font-size: 1.5rem;
	color: var(--text-muted);
	transition: color var(--trans);
}
.user-icon a:hover {
	color: var(--primary);
}

/* CONTAINER */
.container {
	background: var(--card-bg);
	border-radius: var(--radius);
	box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
	position: relative;
	overflow: hidden;
	width: 1000px;
	max-width: 100%;
	min-height: 480px;
	transition: background 0.5s ease, color 0.5s ease;
}

/* FORM CONTAINERS */
.form-container {
	position: absolute;
	top: 0;
	height: 100%;
	transition: all 0.6s ease-in-out;
}
.sign-in-container {
	left: 0;
	width: 50%;
	z-index: 2;
}
.sign-up-container {
	left: 0;
	width: 50%;
	opacity: 0;
	z-index: 1;
}
.container.right-panel-active .sign-in-container {
	transform: translateX(100%);
}
.container.right-panel-active .sign-up-container {
	transform: translateX(100%);
	opacity: 1;
	z-index: 5;
	animation: show 0.6s;
}

@keyframes show {
	0%,
	49.99% {
		opacity: 0;
		z-index: 1;
	}
	50%,
	100% {
		opacity: 1;
		z-index: 5;
	}
}

/* OVERLAY */
.overlay-container {
	position: absolute;
	top: 0;
	left: 50%;
	width: 50%;
	height: 100%;
	overflow: hidden;
	transition: transform 0.6s ease-in-out;
	z-index: 100;
}
.container.right-panel-active .overlay-container {
	transform: translateX(-100%);
}
.overlay {
	background: linear-gradient(to right, var(--primary), var(--secondary));
	color: #fff;
	position: relative;
	left: -100%;
	height: 100%;
	width: 200%;
	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
}
.container.right-panel-active .overlay {
	transform: translateX(50%);
}
.overlay-panel {
	position: absolute;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 40px;
	text-align: center;
	top: 0;
	height: 100%;
	width: 50%;
	transition: transform 0.6s ease-in-out;
}
.overlay-left {
	transform: translateX(-20%);
}
.container.right-panel-active .overlay-left {
	transform: translateX(0);
}
.overlay-right {
	right: 0;
	transform: translateX(0);
}
.container.right-panel-active .overlay-right {
	transform: translateX(20%);
}

/* SOCIAL ICONS */
.social-container {
	margin: var(--sp-md) 0;
}
.social-container a {
	border: 1px solid var(--border);
	border-radius: 50%;
	display: inline-flex;
	justify-content: center;
	align-items: center;
	margin: 0 5px;
	height: 40px;
	width: 40px;
	color: var(--text);
	transition: color var(--trans), background var(--trans);
}
.social-container a:hover {
	background: var(--primary);
	color: #fff;
}

/* FORM ELEMENTS */
form {
	background: var(--card-bg);
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	height: 100%;
	padding: 0 var(--sp-md);
}
form h1 {
	margin-bottom: var(--sp-sm);
	color: var(--primary);
}
form input {
	background: var(--border);
	border: none;
	border-radius: var(--radius);
	padding: var(--sp-xs) var(--sp-sm);
	margin: 8px 0;
	width: 100%;
}
form span {
	font-size: 0.875rem;
}
form .forgot-password {
	font-size: 0.875rem;
	margin: var(--sp-xs) 0;
	color: var(--text-muted);
}

button {
	border-radius: var(--radius);
	border: none;
	padding: var(--sp-sm) var(--sp-lg);
	font-weight: bold;
	cursor: pointer;
	text-transform: uppercase;
	transition: transform 80ms ease-in;
}
button:active {
	transform: scale(0.95);
}
button.ghost {
	background: transparent;
	border: 1px solid #fff;
	color: #fff;
}

/* MOBILE SWITCHER */
.mobile-switcher {
	display: none;
	position: absolute;
	bottom: var(--sp-md);
	width: 100%;
	text-align: center;
	z-index: 1000;
}
.mobile-switcher a {
	font-size: 0.875rem;
	margin: 0 var(--sp-sm);
	color: var(--primary);
	text-decoration: none;
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
	background: rgba(255, 255, 255, 0.9);
}
@media (max-width: 768px) {
	.container {
		width: 100%;
		height: 100vh;
		border-radius: 0;
		box-shadow: none;
	}
	.overlay-container {
		display: none;
	}
	.sign-in-container,
	.sign-up-container {
		width: 100%;
		left: 0;
	}
	.container.right-panel-active .sign-in-container {
		transform: translateX(100%);
	}
	.container.right-panel-active .sign-up-container {
		transform: translateX(0);
		opacity: 1;
		z-index: 5;
	}
	.mobile-switcher {
		display: block;
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\mainPage\index.html
<!-- mainPage -->
<!DOCTYPE html>
<html lang="ru">
	<head>
		<!-- Указываем кодировку и адаптивность -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<!-- Заголовок страницы в браузере -->
		<title>Главная — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- Подключаем стили -->
		<link rel="stylesheet" href="style.css" />
		<!-- Подключаем скрипт (defer — дождётся загрузки DOM) -->
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигационная панель -->
		<header class="navbar">
			<!-- Логотип / название сайта -->
			<div class="logo">Set Learn</div>
			<!-- Ссылки меню -->
			<nav class="nav-links">
				<a href="/static/mainPage/" class="active">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
				>
					Панель админа
				</a>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
			</nav>
			<!-- Блок с дополнительными действиями -->
			<div class="actions">
				<!-- Кнопка переключения темы -->
				<button id="theme-toggle" aria-label="Переключить тему">
					<img src="/static/img/dark-theme.png" alt="dark-theme-toggle" />
				</button>
				<!-- Иконка пользователя -->
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Основной контент: сетка плиток -->
		<main class="container">
			<!-- Крупная плитка с анимацией -->
			<div
				class="tile big-tile"
				onclick="navigate('/static/stepByStepAnimation/')"
			>
				<h2>Пошаговая анимация</h2>
				<p>Интерактивная демонстрация ассоциативного свойства множеств</p>
			</div>
			<!-- Плитка с курсами -->
			<div class="tile courses-tile" onclick="navigate('/static/courses/')">
				<h2>Курсы</h2>
				<p>Курсы по темам, которые вы проходите на данный момент</p>
			</div>
			<!-- Плитка с тестами -->
			<!-- <div class="tile tests-tile" onclick="navigate('/static/questions/')">
				<h2>Тесты</h2>
				<p>Тесты, которые вам доступны на данный момент</p>
			</div> -->
			<!-- Плитка лидерборда -->
			<div
				class="tile leaderboard-tile"
				onclick="navigate('/static/leaderboard/')"
			>
				<h2>Таблица лидеров</h2>
			</div>
			<!-- Плитка с теорией -->
			<!-- <div class="tile theory-tile" onclick="navigate('/static/theory/')">
				<h2>Теория</h2>
			</div> -->
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\mainPage\script.js
// script.js

/* -----------------------
   0. Навигация
------------------------ */
function navigate(url) {
	window.location.href = url
}

/* -----------------------
   1. Обновление иконки темы
------------------------ */
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

/* -----------------------
   2. Подгрузка аватарки в навбар
   и возврат объекта user
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null // не залогинен или другая ошибка
		const user = await res.json()
		if (user.avatar_path) {
			const img = document.querySelector('.user-icon img')
			if (img) img.src = user.avatar_path
		}
		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

/* -----------------------
   3. Показ ссылок в навигации
   для админа и учителя
------------------------ */
async function showRoleLinksIfNeeded() {
	const user = await loadUserIcon()
	if (!user) return
	if (user.role === 'admin') {
		const a = document.getElementById('nav-admin')
		if (a) a.style.display = 'inline-block'
	}
	if (user.role === 'teacher') {
		const t = document.getElementById('nav-teacher')
		if (t) t.style.display = 'inline-block'
	}
}

document.addEventListener('DOMContentLoaded', () => {
	/* --------------------
       4. Активная ссылка
  --------------------- */
	const path = window.location.pathname
	document.querySelectorAll('.nav-links a').forEach(link => {
		link.classList.toggle('active', path.startsWith(link.getAttribute('href')))
	})

	/* --------------------
       5. Тема
  --------------------- */
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	const toggle = document.getElementById('theme-toggle')
	if (toggle) {
		toggle.addEventListener('click', () => {
			const next =
				document.documentElement.getAttribute('data-theme') === 'dark'
					? 'light'
					: 'dark'
			document.documentElement.setAttribute('data-theme', next)
			localStorage.setItem('theme', next)
			updateToggleIcon(next)
		})
	}

	/* --------------------
       6. Показ nav‑ссылок
  --------------------- */
	showRoleLinksIfNeeded()
})

Файл: C:\dev\projects\html\Курсовая работа\static\mainPage\style.css
/* style.css */

/* -----------------------------
   1. Сброс отступов и box-sizing
   ----------------------------- */
*,
*::before,
*::after {
	box-sizing: border-box; /* единая модель расчёта размеров */
	margin: 0; /* сброс внешних отступов */
	padding: 0; /* сброс внутренних отступов */
}

/* =================================
   2. Базовые настройки страницы
   ================================= */
html {
	font-size: 16px; /* базовый размер шрифта */
	scroll-behavior: smooth; /* плавный скролл по якорям */
}

body {
	font-family: 'Inter', sans-serif; /* основной шрифт */
	line-height: 1.6; /* межстрочный интервал */
	background-color: var(--bg); /* фон из переменных */
	color: var(--text); /* цвет текста из переменных */
	min-height: 100vh; /* минимум высоты экрана */
	transition: background-color 0.5s ease, color 0.5s ease; /* плавная смена темы */
}

/* =================================
   3. Переменные для тем и отступов
   ================================= */
:root {
	/* Светлая тема */
	--bg: #f9fafb; /* фон страницы */
	--text: #1f2937; /* основной текст */
	--card-bg: #ffffff; /* фон карточек */
	--border: #e5e7eb; /* цвет границ */
	--primary: #4f46e5; /* основной акцент */
	--text-muted: #6b7280; /* вспомогательный текст */

	/* Отступы */
	--sp-xxs: 0.25rem;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;

	/* Скругления и переходы */
	--radius: 0.5rem;
	--trans: 0.3s ease;
}

/* Тёмная тема (перекрывает переменные) */
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

/* =================================
   4. Стили для навигационной панели
   ================================= */
.navbar {
	display: flex; /* флекс-контейнер */
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg); /* фон навбара */
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0; /* всегда сверху */
	z-index: 100;
	transition: background-color 0.5s ease;
}

/* Логотип */
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}

/* Ссылки меню */
.nav-links {
	display: flex;
	gap: var(--sp-md);
}

.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xxs) 0;
	transition: color var(--trans);
}

/* Активная ссылка и при наведении */
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}

/* Блок действий */
.actions {
	display: flex;
	align-items: center;
}

/* Кнопка переключения темы */
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}

/* Иконка пользователя */
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* =================================
   5. Сетка плиток (main.container)
   ================================= */
.container {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
	grid-auto-rows: 200px;
	gap: var(--sp-md);
	padding: var(--sp-md);
}

/* =================================
   6. Стили плиток .tile
   ================================= */
.tile {
	background-color: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	cursor: pointer;
	transition: transform var(--trans), box-shadow var(--trans),
		background-color 0.5s ease, border-color 0.5s ease;
}
.tile:hover {
	transform: translateY(-4px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Заголовок внутри плитки */
.tile h2 {
	color: var(--primary);
}
.tile p {
	color: var(--text-muted);
}

/* «одноцветная» тема для всех плиток */
.big-tile,
.courses-tile,
.tests-tile,
.leaderboard-tile,
.theory-tile {
	background-color: var(--card-bg);
	border-color: var(--border);
	color: var(--text);
}

/* =================================
   7. Адаптив для мобилок
   ================================= */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
	.container {
		grid-auto-rows: 180px;
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\profile\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Личный кабинет — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<link rel="stylesheet" href="/static/profile/style.css" />
		<script src="/static/profile/script.js" defer></script>
	</head>
	<body>
		<!-- Единое верхнее меню -->
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
				>
					Панель админа
				</a>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Новый контейнер для аватарки + имени -->
		<div class="avatar-profile">
			<div class="avatar-wrapper">
				<img id="avatar" src="/static/uploads/default.png" alt="Avatar" />
				<img
					id="change-icon"
					class="change-icon"
					src="/static/img/change-icon-img.png"
					alt="Change"
				/>
				<button
					id="remove-avatar-btn"
					class="remove-avatar-btn"
					title="Удалить аватар"
				>
					✕
				</button>
				<input
					id="avatar-input"
					type="file"
					accept="image/*"
					style="display: none"
				/>
			</div>
			<!-- сюда JS будет записывать имя -->
			<div class="avatar-info">
				<span id="avatar-username" class="avatar-username"></span>
				<!-- разделитель -->
				<hr class="avatar-separator" />
				<!-- блок для роли -->
				<span id="avatar-role" class="avatar-role"></span>
			</div>
		</div>

		<!-- Подтверждающий попап на удаление фотки профиля -->
		<div id="confirm-modal" class="modal-overlay">
			<div class="modal">
				<p>Вы действительно хотите удалить фото?</p>
				<div class="modal-actions">
					<button id="confirm-yes" class="btn btn-primary">Да</button>
					<button id="confirm-no" class="btn btn-secondary">Нет</button>
				</div>
			</div>
		</div>

		<main class="profile-container">
			<div class="profile-section">
				<!-- заголовок‑тогглер -->
				<button id="profile-toggle" class="profile-toggle" type="button">
					<span>Личные данные</span>
					<span class="profile-toggle-icon">➕</span>
				</button>

				<!-- сам контент, по умолчанию скрыт -->
				<div id="profile-details" class="profile-details">
					<div class="profile-card">
						<p><strong>Имя:</strong> <span id="fullName"></span></p>
						<p><strong>Email:</strong> <span id="email"></span></p>
						<p><strong>Роль:</strong> <span id="role"></span></p>
						<p><strong>Активен:</strong> <span id="isActive"></span></p>
						<p><strong>Создан:</strong> <span id="createdAt"></span></p>
						<p><strong>Последний вход:</strong> <span id="lastLogin"></span></p>
					</div>
				</div>
				<div class="profile-logout">
					<button id="logout-btn" class="logout-btn">Выйти</button>
				</div>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\profile\script.js
/* -----------------------
   0. Функция навигации
------------------------ */
function navigate(url) {
	window.location.href = url
}

/* -----------------------
   1. Обновление иконки темы
------------------------ */
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

/* -----------------------
   2. Подгрузка аватарки в навбар
   (возвращает объект user)
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null // не залогинен или другая ошибка
		const user = await res.json()
		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}
		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

/* -----------------------
   3. Загрузка данных профиля
   + показ ссылки "Панель админа"
------------------------ */
async function loadProfile() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (res.status === 401) {
			window.location.href = '/'
			return
		}
		if (!res.ok) {
			console.error('Failed to fetch profile:', res.status, res.statusText)
			return
		}

		const user = await res.json()
		const setText = (id, text) => {
			const el = document.getElementById(id)
			if (el) el.textContent = text
		}

		// Имя и роль в блоке аватарки
		const avatarNameEl = document.getElementById('avatar-username')
		if (avatarNameEl) avatarNameEl.textContent = user.full_name

		const avatarRoleEl = document.getElementById('avatar-role')
		if (avatarRoleEl) {
			avatarRoleEl.textContent = user.role || ''
			avatarRoleEl.classList.remove('student', 'teacher', 'admin')
			avatarRoleEl.classList.add(user.role.toLowerCase())
		}

		// Остальные базовые поля
		setText('fullName', user.full_name)
		setText('email', user.email)
		setText('role', user.role)

		// Онлайн / последний визит
		const isActiveEl = document.getElementById('isActive')
		if (isActiveEl) {
			if (user.is_active) {
				isActiveEl.textContent = 'в сети'
			} else {
				const dt = new Date(user.last_login)
				const now = new Date()
				const two = n => String(n).padStart(2, '0')
				const hhmm = `${two(dt.getHours())}:${two(dt.getMinutes())}`

				const isToday = dt.toDateString() === now.toDateString()
				const yesterday = new Date(now)
				yesterday.setDate(now.getDate() - 1)
				const isYesterday = dt.toDateString() === yesterday.toDateString()

				let text
				if (isToday) {
					text = `был(а) сегодня в ${hhmm}`
				} else if (isYesterday) {
					text = `был(а) вчера в ${hhmm}`
				} else {
					const monthNames = [
						'янв.',
						'фев.',
						'мар.',
						'апр.',
						'май',
						'июн.',
						'июл.',
						'авг.',
						'сен.',
						'окт.',
						'ноя.',
						'дек.',
					]
					text = `был(а) ${dt.getDate()} ${monthNames[dt.getMonth()]} в ${hhmm}`
				}
				isActiveEl.textContent = text
			}
		}

		// Даты создания и последнего входа
		setText('createdAt', new Date(user.created_at).toLocaleString())
		setText('lastLogin', new Date(user.last_login).toLocaleString())

		// Локальный превью аватара, если есть
		const avatarEl = document.getElementById('avatar')
		if (avatarEl && user.avatar_path) {
			avatarEl.src = user.avatar_path
		}

		// Показ ссылки "Панель админа" для админа
		if (user.role === 'admin') {
			const adminLink = document.getElementById('nav-admin')
			if (adminLink) adminLink.style.display = 'inline-block'
		}
		if (user.role === 'teacher') {
			const teacherLink = document.getElementById('nav-teacher')
			if (teacherLink) teacherLink.style.display = 'inline-block'
		}
	} catch (err) {
		console.error('Error loading profile:', err)
	}
}

/* -----------------------
   4. DOMContentLoaded
------------------------ */
document.addEventListener('DOMContentLoaded', () => {
	// A) Подсветка активной ссылки
	const path = window.location.pathname
	document
		.querySelectorAll('.nav-links a')
		.forEach(link =>
			link.classList.toggle(
				'active',
				path.startsWith(link.getAttribute('href'))
			)
		)

	// B) Инициализация темы
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	// C) Переключатель темы
	const toggle = document.getElementById('theme-toggle')
	if (toggle) {
		toggle.addEventListener('click', () => {
			const next =
				document.documentElement.getAttribute('data-theme') === 'dark'
					? 'light'
					: 'dark'
			document.documentElement.setAttribute('data-theme', next)
			localStorage.setItem('theme', next)
			updateToggleIcon(next)
		})
	}

	// D) Загрузка профиля
	loadProfile()

	// accordion для личных данных
	const toggleBtn = document.getElementById('profile-toggle')
	const details = document.getElementById('profile-details')
	const icon = toggleBtn.querySelector('.profile-toggle-icon')

	toggleBtn.addEventListener('click', () => {
		const isOpen = toggleBtn.classList.contains('open')

		if (isOpen) {
			// сворачиваем
			details.style.height = details.scrollHeight + 'px' // текущая высота
			requestAnimationFrame(() => {
				details.style.height = '0'
			})
			toggleBtn.classList.remove('open')
			icon.textContent = '➕'
		} else {
			// разворачиваем
			toggleBtn.classList.add('open')
			// сначала даём деталям максимально возможную высоту
			details.style.height = details.scrollHeight + 'px'
			icon.textContent = '➖'
			// после окончания анимации — убираем жёсткую высоту, чтобы контент мог расти
			details.addEventListener('transitionend', function handler() {
				details.style.height = 'auto'
				details.removeEventListener('transitionend', handler)
			})
		}
	})

	// E) Смена аватара
	const changeIcon = document.getElementById('change-icon')
	const avatarInput = document.getElementById('avatar-input')
	const avatarImg = document.getElementById('avatar')
	if (changeIcon && avatarInput && avatarImg) {
		changeIcon.addEventListener('click', () => avatarInput.click())
		avatarInput.addEventListener('change', () => {
			const file = avatarInput.files[0]
			if (!file) return
			// локальное превью сразу
			avatarImg.src = URL.createObjectURL(file)
			// отправляем на сервер
			const fd = new FormData()
			fd.append('avatar', file)
			fetch('/api/upload-avatar', {
				method: 'POST',
				body: fd,
				credentials: 'same-origin',
			})
				.then(res => res.json())
				.then(data => {
					if (data.url) avatarImg.src = data.url
				})
				.catch(err => console.error('Upload error:', err))
		})
	}

	// F) Подтверждающий попап удаления аватарки
	const removeBtn = document.getElementById('remove-avatar-btn')
	const modal = document.getElementById('confirm-modal')
	const yesBtn = document.getElementById('confirm-yes')
	const noBtn = document.getElementById('confirm-no')
	if (removeBtn && modal && yesBtn && noBtn && avatarImg) {
		// Показать окно
		removeBtn.addEventListener('click', () => {
			modal.classList.add('show')
		})

		// Отмена удаления
		noBtn.addEventListener('click', () => {
			modal.classList.remove('show')
		})

		// Подтверждение удаления
		yesBtn.addEventListener('click', () => {
			fetch('/api/remove-avatar', {
				method: 'POST',
				credentials: 'same-origin',
			})
				.then(res => res.json())
				.then(data => {
					if (data.url) {
						avatarImg.src = data.url
					}
				})
				.catch(err => console.error('Remove avatar error:', err))
				.finally(() => {
					modal.classList.remove('show')
				})
		})

		// Закрыть попап кликом по оверлею
		modal.addEventListener('click', e => {
			if (e.target === modal) {
				modal.classList.remove('show')
			}
		})
	}

	// G) Кнопка выхода
	const logoutBtn = document.getElementById('logout-btn')
	if (logoutBtn) {
		logoutBtn.addEventListener('click', () => {
			window.location.href = '/logout'
		})
	}

	loadUserIcon()
})

Файл: C:\dev\projects\html\Курсовая работа\static\profile\style.css
/* -----------------------------
   1. Сброс отступов и box-sizing
----------------------------- */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

/* =================================
   2. Базовые настройки страницы
================================= */
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background-color: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background-color 0.5s ease, color 0.5s ease;
}

/* =================================
   3. Переменные для тем и отступов
================================= */
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;

	--sp-xxs: 0.25rem;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;

	--radius: 0.5rem;
	--trans: 0.3s ease;
}

:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

/* =================================
   4. Стили для навигационной панели
================================= */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
	transition: background-color 0.5s ease;
}

.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}

.nav-links {
	display: flex;
	gap: var(--sp-md);
}

.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xxs) 0;
	transition: color var(--trans);
}

.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}

.actions {
	display: flex;
	align-items: center;
}

#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}

.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* =================================
   5. Стили профиля
================================= */
.avatar-wrapper {
	position: relative;
	width: 120px;
	height: 120px;
	margin: 30px auto 0; /* 50px сверху, по центру, 0 снизу */
}
.avatar-wrapper img#avatar {
	width: 100%;
	height: 100%;
	object-fit: cover;
	border-radius: 50%;
	border: 2px solid var(--border);
	transition: border-color var(--trans);
}
.avatar-wrapper img#avatar:hover {
	border-color: var(--primary);
}

.avatar-profile {
	display: flex;
	flex-direction: column; /* вот это ключевое */
	align-items: center; /* центрируем по горизонтали */
	gap: var(--sp-sm); /* расстояние между аватаркой и именем */
	margin: var(--sp-lg) auto; /* верхний отступ и авт. центр по ширине */
	max-width: 600px; /* если нужно в рамках карточки */
}

/* Сам текст имени */
.avatar-username {
	font-size: 1.25rem;
	font-weight: 600;
	color: var(--text);
}

/* тонкая линия‑разделитель под именем */
.avatar-separator {
	width: 60%; /* длина линии — 60% от ширины родителя */
	border: none;
	border-bottom: 1px solid var(--border);
	margin: var(--sp-xs) auto; /* вертикальные отступы и центрирование */
}

/* текст роли пользователя */
.avatar-role {
	display: block;
	font-size: 1rem;
	color: var(--text-muted);
	text-align: center; /* по центру под линией */
	margin-top: var(--sp-xxs);
}

/* Цвета ролей */
.avatar-role.student {
	color: var(--text-muted);
}

.avatar-role.teacher {
	color: #10b981; /* зелёный (пример: Tailwind green-500) */
}

.avatar-role.admin {
	color: var(--primary);
}

/* Иконка «карандашика» для смены фото */
.change-icon {
	position: absolute;
	bottom: 0;
	right: 0;
	width: 32px;
	height: 32px;
	cursor: pointer;
	transition: transform var(--trans);
}
.change-icon:hover {
	transform: scale(1.1);
}

/* Кнопка удаления фотки профиля */
.remove-avatar-btn {
	position: absolute;
	bottom: 0;
	left: 0;
	border: none;
	background: var(--border);
	color: var(--text);
	width: 24px;
	height: 24px;
	border-radius: 4px;
	cursor: pointer;
	font-size: 14px;
}
.remove-avatar-btn:hover {
	background: var(--primary);
	color: #fff;
}

/* ===== Подтверждающий модал ===== */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.4);
	display: none; /* по умолчанию скрыт */
	align-items: center;
	justify-content: center;
	z-index: 1000;
	transition: opacity var(--trans);
}
.modal-overlay.show {
	display: flex;
	opacity: 1;
}

.modal {
	background: var(--card-bg);
	color: var(--text);
	padding: var(--sp-lg);
	border-radius: var(--radius);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
	max-width: 320px;
	text-align: center;
}

.modal p {
	margin-bottom: var(--sp-md);
}

.modal-actions {
	display: flex;
	justify-content: center;
	gap: var(--sp-md);
}

.modal .btn {
	padding: var(--sp-xs) var(--sp-md);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	font-weight: 500;
}
.btn-primary {
	background: var(--primary);
	color: #fff;
}
.btn-primary:hover {
	opacity: 0.9;
}
.btn-secondary {
	background: var(--border);
	color: var(--text);
}
.btn-secondary:hover {
	background: var(--primary);
	color: #fff;
}

.profile-container {
	max-width: 600px;
	margin: 2rem auto;
	padding: var(--sp-md);
}

.profile-card {
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.profile-card p {
	margin-bottom: var(--sp-sm);
}

.profile-logout {
	text-align: center;
	margin-top: var(--sp-lg);
}

.logout-btn {
	background-color: var(--primary);
	color: #fff;
	font-size: 1rem;
	padding: var(--sp-xs) var(--sp-md);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: transform var(--trans), opacity var(--trans);
}
.logout-btn:hover {
	transform: scale(1.02);
	opacity: 0.9;
}

/* контейнер‑аккордеон */
.profile-section {
	max-width: 600px;
	margin: var(--sp-lg) auto;
}

/* кнопка‑заголовок */
.profile-toggle {
	width: 100%;
	background: var(--card-bg);
	color: var(--text);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-sm) var(--sp-md);
	display: flex;
	align-items: center;
	justify-content: space-between;
	font-weight: 600;
	cursor: pointer;
	transition: background-color var(--trans), border-color var(--trans);
}
.profile-toggle:hover {
	background-color: var(--bg);
}

/* иконка внутри кнопки */
.profile-toggle-icon {
	display: inline-block;
	transition: transform var(--trans);
}

/* контейнер с деталями */
.profile-details {
	overflow: hidden;
	height: 0;
	transition: height 0.35s ease;
}

/* =================================
   6. Адаптив для мобильных
================================= */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\questions\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Тест — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>
		<!-- 2. Стили -->
		<link rel="stylesheet" href="style.css" />
		<!-- 3. Скрипт страницы -->
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигационная панель -->
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
					>Панель админа</a
				>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Контент страницы -->
		<div class="page-content">
			<h1 id="test-title">Загрузка теста...</h1>
			<form id="quiz">
				<!-- Вопросы вставятся динамически -->
			</form>
			<button type="button" id="check">Проверить</button>
		</div>

		<!-- Popup результатов -->
		<div class="popup-overlay" id="popupOverlay">
			<div class="popup-content">
				<span class="close-btn" onclick="closePopup()">&times;</span>
				<div class="popup-body">
					<h2>Результаты теста</h2>
					<p id="popupResult"></p>
					<div class="progress-bar">
						<div class="progress" id="progressFill"></div>
					</div>
				</div>
			</div>
		</div>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\questions\script.js
// Навигация
function navigate(url) {
	window.location.href = url
}

// Обновление иконки темы
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

// Инициализация темы
function initTheme() {
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)
	document.getElementById('theme-toggle').addEventListener('click', () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	})
}

// Подгрузка аватарки и ролей
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null
		const user = await res.json()
		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}
		if (user.role === 'admin') {
			document.getElementById('nav-admin').style.display = 'flex'
		}
		if (user.role === 'teacher') {
			document.getElementById('nav-teacher').style.display = 'inline-block'
		}
		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

function levenshtein(a, b) {
	const an = a.length
	const bn = b.length
	if (an === 0) return bn
	if (bn === 0) return an

	const matrix = []

	for (let i = 0; i <= bn; i++) {
		matrix[i] = [i]
	}
	for (let j = 0; j <= an; j++) {
		matrix[0][j] = j
	}

	for (let i = 1; i <= bn; i++) {
		for (let j = 1; j <= an; j++) {
			if (b.charAt(i - 1) === a.charAt(j - 1)) {
				matrix[i][j] = matrix[i - 1][j - 1]
			} else {
				matrix[i][j] = Math.min(
					matrix[i - 1][j - 1] + 1, // замена
					matrix[i][j - 1] + 1, // вставка
					matrix[i - 1][j] + 1 // удаление
				)
			}
		}
	}

	return matrix[bn][an]
}

function compareTextAnswers(userInput, correct, threshold = 80) {
	const u = userInput.trim().toLowerCase()
	const c = correct.trim().toLowerCase()
	if (!c) return false
	const distance = levenshtein(u, c)
	const maxLen = Math.max(u.length, c.length)
	const similarity = (1 - distance / maxLen) * 100
	return similarity >= threshold
}

// Показать popup с результатом
function showPopup(score, total) {
	const overlay = document.getElementById('popupOverlay')
	document.getElementById(
		'popupResult'
	).textContent = `Вы набрали ${score} из ${total}.`
	document.getElementById('progressFill').style.width = `${
		(score / total) * 100
	}%`
	overlay.classList.add('active')
}
function closePopup() {
	document.getElementById('popupOverlay').classList.remove('active')
}

// Основная логика
document.addEventListener('DOMContentLoaded', async () => {
	initTheme()
	await loadUserIcon()

	// Парсим ?test=ID
	const params = new URLSearchParams(location.search)
	const testId = params.get('test')
	if (!testId) {
		document.getElementById('quiz').textContent = 'Тест не указан.'
		return
	}

	// Загружаем вопросы
	let questions
	try {
		const res = await fetch(`/api/tests/${testId}/questions`, {
			credentials: 'same-origin',
		})
		if (!res.ok) throw new Error(res.status)
		questions = await res.json()
	} catch (e) {
		document.getElementById('quiz').textContent = 'Ошибка загрузки теста.'
		console.error(e)
		return
	}

	// Отрисовка вопросов
	const form = document.getElementById('quiz')
	questions.forEach((q, idx) => {
		const wrapper = document.createElement('div')
		wrapper.className = 'question'
		const h = document.createElement('h4')
		h.textContent = `${idx + 1}. ${q.question_text}`
		wrapper.appendChild(h)

		if (q.question_type === 'closed') {
			q.options.forEach(opt => {
				const label = document.createElement('label')
				const inp = document.createElement('input')
				inp.type = q.multiple_choice ? 'checkbox' : 'radio'
				inp.name = `q_${q.id}`
				inp.value = opt.id
				label.append(inp, ' ', opt.option_text)
				wrapper.appendChild(label)
			})
		} else {
			const ta = document.createElement('textarea')
			ta.name = `q_${q.id}`
			ta.classList.add('open-question-input')
			wrapper.appendChild(ta)
		}

		form.appendChild(wrapper)
	})

	// Проверка ответов
	document.getElementById('check').addEventListener('click', () => {
		let score = 0
		const total = questions.length

		questions.forEach(q => {
			const name = `q_${q.id}`
			if (q.question_type === 'closed') {
				const selected = Array.from(form.elements[name])
					.filter(el => el.checked)
					.map(el => el.value)
				const correct = q.options
					.filter(o => o.is_correct)
					.map(o => String(o.id))
				// сравниваем как множества
				if (
					selected.length === correct.length &&
					selected.every(v => correct.includes(v))
				) {
					score++
				}
			} else if (q.question_type === 'open') {
				const answer = form.elements[name].value.trim()
				if (compareTextAnswers(answer, q.correct_answer_text, 80)) {
					score++
				}
			}
		})

		showPopup(score, total)
	})

	// Закрытие попапа
	document.getElementById('popupOverlay').addEventListener('click', e => {
		if (e.target.id === 'popupOverlay') closePopup()
	})
	document.addEventListener('keydown', e => {
		if (e.key === 'Escape') closePopup()
	})
})

Файл: C:\dev\projects\html\Курсовая работа\static\questions\style.css
/* RESET */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

/* VARIABLES */
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background-color: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background-color 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	transition: color var(--trans);
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* PAGE CONTENT */
.page-content {
	padding: var(--sp-lg) var(--sp-md);
	max-width: 800px;
	margin: 0 auto;
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color var(--trans);
}

/* QUESTIONS */
.question {
	background-color: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-sm);
	margin-bottom: var(--sp-md);
	transition: background-color var(--trans), border-color var(--trans);
}
.question h4 {
	margin-bottom: var(--sp-xs);
}
.question label {
	display: block;
	margin-bottom: var(--sp-xs);
	cursor: pointer;
	color: var(--text);
	transition: color var(--trans);
}
.question input[type='radio'],
.question input[type='checkbox'] {
	margin-right: var(--sp-xs);
}

/* BUTTON */
#check {
	display: inline-block;
	padding: var(--sp-sm) var(--sp-md);
	font-size: 1rem;
	background-color: var(--primary);
	color: #fff;
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: background-color var(--trans), transform var(--trans),
		box-shadow var(--trans);
}
#check:hover {
	transform: translateY(-2px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
#check:active {
	transform: translateY(0);
}

/* POPUP */
.popup-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	display: none;
	align-items: center;
	justify-content: center;
	z-index: 1000;
	opacity: 0;
	transition: opacity 0.3s ease;
}
.popup-overlay.active {
	display: flex;
	opacity: 1;
}
.popup-content {
	background: var(--card-bg);
	padding: var(--sp-md);
	border-radius: var(--radius);
	width: 90%;
	max-width: 400px;
	position: relative;
	transform: translateY(-30px);
	transition: transform 0.3s ease;
}
.popup-overlay.active .popup-content {
	transform: translateY(0);
}
.close-btn {
	position: absolute;
	top: var(--sp-sm);
	right: var(--sp-sm);
	font-size: 1.5rem;
	cursor: pointer;
	color: var(--text-muted);
}
.popup-body h2 {
	margin-bottom: var(--sp-sm);
	color: var(--primary);
}
.popup-body p {
	margin-bottom: var(--sp-sm);
}
.progress-bar {
	background: var(--border);
	height: 10px;
	border-radius: 5px;
	overflow: hidden;
}
.progress {
	height: 100%;
	background: var(--primary);
	width: 0;
	transition: width 0.3s ease;
}

/* Стили для поля открытого ответа в панели учителя */
.open-question-input {
	width: 100%;
	max-width: 600px; /* ограничивает растяжение */
	min-height: 60px; /* минимальная высота */
	padding: var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	font-size: 1rem;
	font-family: inherit;
	resize: vertical; /* разрешает только вертикальное растяжение */
	background: var(--bg);
	color: var(--text);
	box-sizing: border-box; /* учитывает padding/border в width */
	transition: border-color var(--trans), background var(--trans),
		color var(--trans);
}

/* Если нужно, можно ограничить максимальную высоту */
.open-question-input {
	max-height: 200px;
}

/* RESPONSIVE */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
	.page-content {
		padding: var(--sp-md);
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\stepByStepAnimation\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Пошаговая анимация — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- Общие стили и скрипт с поддержкой светлой/тёмной темы -->
		<link rel="stylesheet" href="style.css" />
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигация -->
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
				>
					Панель админа
				</a>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
				<a href="/static/stepByStepAnimation/" class="active"
					>Пошаговая анимация</a
				>
			</nav>
			<div class="actions">
				<!-- Тогглер темы -->
				<button id="theme-toggle" aria-label="Переключить тему">
					<img src="/static/img/dark-theme.png" alt="dark-theme-toggle" />
				</button>
				<!-- Иконка пользователя -->
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefaultImg" />
				</div>
			</div>
		</header>

		<!-- Контент анимации -->
		<main class="page-content">
			<h1>Пошаговая анимация</h1>
			<!-- Здесь разместите свой контейнер для анимации -->
			<div id="animation-container">
				<!-- Ваша интерактивная анимация -->
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\stepByStepAnimation\script.js
// Навигация для плиток
function navigate(url) {
	window.location.href = url
}

/* -----------------------
   2. Подгрузка аватарки в навбар
   (теперь возвращает user)
------------------------ */
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return null // не залогинен или другая ошибка
		const user = await res.json()

		if (user.avatar_path) {
			const navImg = document.querySelector('.user-icon img')
			if (navImg) navImg.src = user.avatar_path
		}

		return user
	} catch (err) {
		console.error('Error loading user icon:', err)
		return null
	}
}

// Обновляет иконку темы
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = ''

	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

document.addEventListener('DOMContentLoaded', () => {
	// Подсветка активного пункта меню
	const path = window.location.pathname
	document.querySelectorAll('.nav-links a').forEach(link => {
		link.classList.toggle('active', path.startsWith(link.getAttribute('href')))
	})

	// Инициализация темы
	const stored = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = stored || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	// Обработчик переключения темы
	const toggleBtn = document.getElementById('theme-toggle')
	if (toggleBtn) {
		toggleBtn.addEventListener('click', () => {
			const next =
				document.documentElement.getAttribute('data-theme') === 'dark'
					? 'light'
					: 'dark'
			document.documentElement.setAttribute('data-theme', next)
			localStorage.setItem('theme', next)
			updateToggleIcon(next)
		})
	}

	// Подгрузить аватар и проверить роль
	loadUserIcon().then(user => {
		if (!user) return
		if (user.role === 'admin') {
			const adminTile = document.getElementById('nav-admin')
			if (adminTile) adminTile.style.display = 'flex'
		}
		if (user.role === 'teacher') {
			// 1) в навигации
			const navTeacher = document.getElementById('nav-teacher')
			if (navTeacher) navTeacher.style.display = 'inline-block'
			// 2) на главной странице-плитках
			const teacherTile = document.getElementById('go-to-teacher')
			if (teacherTile) teacherTile.style.display = 'flex'
		}
	})
})

Файл: C:\dev\projects\html\Курсовая работа\static\stepByStepAnimation\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}

:root {
	/* Светлая тема */
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;

	/* Отступы и радиус */
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	/* Тёмная тема */
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	line-height: 1.6;
	background-color: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background-color 0.5s ease, color 0.5s ease;
}

/* NAVBAR */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
	transition: background-color 0.5s ease;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	transition: color var(--trans);
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background-color: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	margin-right: var(--sp-sm);
	transition: transform 0.2s;
}
#theme-toggle:hover {
	transform: scale(1.1);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* PAGE CONTENT */
.page-content {
	max-width: 800px;
	margin: var(--sp-md) auto;
	padding: 0 var(--sp-md);
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color 0.5s ease;
}

/* Анимация-контейнер */
#animation-container {
	background-color: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	transition: background-color 0.5s ease, border-color 0.5s ease;
	/* Задайте нужные размеры для вашей анимации */
	height: 400px;
}

/* RESPONSIVE */
@media (max-width: 600px) {
	.navbar {
		flex-direction: column;
		gap: var(--sp-xs);
	}
	.nav-links {
		flex-wrap: wrap;
		justify-content: center;
	}
	#animation-container {
		height: 300px;
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\courses.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Панель учителя — Курсы</title>
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="/static/teacherPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="/static/teacherPanel/script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo" onclick="navigate('index.html')">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/index.html">Главная</a>
				<a href="index.html">Панель учителя</a>
				<a href="courses.html" class="active">Курсы</a>
				<a href="tests.html">Тесты</a>
				<a href="questions.html">Вопросы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefault" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Управление курсами</h1>

			<form id="newTeacherCourseForm" class="course-form">
				<input name="title" placeholder="Название курса" required />
				<input name="description" placeholder="Описание курса" required />
				<button type="submit"><i class="fas fa-plus"></i> Добавить</button>
			</form>

			<div class="table-wrapper">
				<table id="teacherCoursesTable">
					<thead>
						<tr>
							<th>Название</th>
							<th>Описание</th>
							<th>Дата создания</th>
							<th>Действия</th>
						</tr>
					</thead>
					<tbody id="teacherCoursesBody"></tbody>
				</table>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Панель учителя — Set Learn</title>
		<!-- 1. Инициализация темы -->
		<script src="/static/js/theme-init.js"></script>
		<!-- 2. Стили панели учителя -->
		<link rel="stylesheet" href="/static/teacherPanel/style.css" />
		<!-- 3. Font Awesome -->
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<!-- 4. Скрипт панели учителя -->
		<script src="/static/teacherPanel/script.js" defer></script>
	</head>
	<body>
		<!-- NAVBAR -->
		<header class="navbar">
			<div class="logo" onclick="navigate('/static/mainPage/')">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/index.html">Главная</a>
				<a href="index.html" class="active">Панель учителя</a>
				<a href="courses.html">Курсы</a>
				<a href="tests.html">Тесты</a>
				<a href="questions.html">Вопросы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefault" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Панель учителя</h1>
			<div class="tiles">
				<a class="card" href="courses.html">Управление курсами</a>
				<a class="card" href="tests.html">Управление тестами</a>
				<a class="card" href="questions.html">Управление вопросами</a>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\questions.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Панель учителя — Вопросы</title>
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="/static/teacherPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="/static/teacherPanel/script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo" onclick="navigate('index.html')">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/index.html">Главная</a>
				<a href="index.html">Панель учителя</a>
				<a href="courses.html">Курсы</a>
				<a href="tests.html">Тесты</a>
				<a href="questions.html" class="active">Вопросы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefault" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Управление вопросами</h1>

			<form id="newQuestionForm" class="course-form">
				<select name="test_id" id="testSelect" required>
					<option value="">Выберите тест</option>
				</select>
				<input
					name="question_text"
					type="text"
					placeholder="Текст вопроса"
					required
				/>

				<select name="question_type" id="newQuestionType">
					<option value="open">Открытый</option>
					<option value="closed" selected>Закрытый</option>
				</select>
				<label id="multiAnswerLabel" class="multi-answer-label">
					<input type="checkbox" name="multiple_choice" />
					Несколько ответов
				</label>

				<input
					type="text"
					name="correct_answer_text"
					id="newAnswerInput"
					placeholder="Правильный ответ (для открытых)"
					style="display: none"
				/>

				<button type="submit"><i class="fas fa-plus"></i> Добавить</button>
			</form>

			<div class="table-wrapper">
				<table id="questionsTable">
					<thead>
						<tr>
							<th>Вопрос</th>
							<th>Тип</th>
							<th>Несколько</th>
							<th>Тест ID</th>
							<th>Дата создания</th>
							<th>Ответ / Варианты</th>
							<th>Действия</th>
						</tr>
					</thead>
					<tbody id="questionsBody">
						<!-- Здесь JS динамически создаёт строки вопросов и их варианты -->
					</tbody>
				</table>
			</div>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\script.js
// -----------------------
// 1. Навигация
// -----------------------
function navigate(url) {
	window.location.href = url
}

// -----------------------
// 2. Загрузка аватарки
// -----------------------
async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'include' })
		if (!res.ok) return
		const user = await res.json()
		if (user.avatar_path) {
			const img = document.querySelector('.user-icon img')
			if (img) img.src = user.avatar_path
		}
	} catch (err) {
		console.error('Error loading user icon:', err)
	}
}

// -----------------------
// 3. Иконка темы
// -----------------------
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	btn.innerHTML = ''
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme'
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'
	btn.appendChild(icon)
}

// ——— State и функции для быстрой модалки вопросов ———
let quickIsDirty = false

function openQuestionModal(testId) {
	document.getElementById('quickTestId').value = testId
	document.getElementById('questionModal').style.display = 'flex'
	quickIsDirty = false
	document.getElementById('saveQuickQuestions').disabled = true
}

function clearQuickModal() {
	document.getElementById('quickQuestionsList').innerHTML = ''
	document.getElementById('quickQuestionForm').reset()
}

function tryCloseModal() {
	if (quickIsDirty) {
		document.getElementById('unsavedConfirm').style.display = 'block'
	} else {
		forceCloseModal()
	}
}

function forceCloseModal() {
	document.getElementById('questionModal').style.display = 'none'
	document.getElementById('unsavedConfirm').style.display = 'none'
	clearQuickModal()
	location.reload()
}

function cancelClose() {
	document.getElementById('unsavedConfirm').style.display = 'none'
}

async function saveQuickQuestions() {
	const testId = +document.getElementById('quickTestId').value
	const items = document.querySelectorAll('#quickQuestionsList .question-item')
	for (let li of items) {
		const qRes = await fetch('/api/teacher/questions', {
			method: 'POST',
			credentials: 'include',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				test_id: testId,
				question_text: li.querySelector('.question-text').textContent,
				question_type: li.dataset.type,
				multiple_choice: li.dataset.multi === 'true',
			}),
		})
		if (!qRes.ok) throw new Error('Не удалось сохранить вопрос')
		const { id: realQid } = await qRes.json()

		for (let opt of li.querySelectorAll('.options-list .option-item')) {
			await fetch('/api/teacher/options', {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					question_id: realQid,
					option_text: opt.querySelector('.option-text').textContent,
					is_correct: opt.querySelector('input').checked,
				}),
			})
		}
	}
	quickIsDirty = false
	document.getElementById('saveQuickQuestions').disabled = true
	forceCloseModal()
}

// -----------------------
// loadOptions
// -----------------------
async function loadOptions(questionId) {
	const tbodyOpts = document.getElementById(`opts-${questionId}`)
	if (!tbodyOpts) return
	tbodyOpts.innerHTML = ''
	try {
		const res = await fetch(`/api/teacher/options?question_id=${questionId}`, {
			credentials: 'include',
		})
		if (!res.ok) throw ''
		const opts = await res.json()
		opts.forEach(o => {
			const tr = document.createElement('tr')
			tr.innerHTML = `
        <td><input class="edit-opt-text" data-id="${o.id}" value="${
				o.option_text
			}"></td>
        <td><input type="checkbox" class="edit-opt-correct" data-id="${o.id}"${
				o.is_correct ? ' checked' : ''
			}></td>
        <td>
          <button class="save-option" data-id="${
						o.id
					}"><i class="fas fa-save"></i></button>
          <button class="del-option" data-id="${
						o.id
					}"><i class="fas fa-trash"></i></button>
        </td>`
			tbodyOpts.appendChild(tr)
		})
	} catch {
		console.error('Ошибка загрузки вариантов')
	}
}

async function loadQuestions(testId) {
	const tbody = document.getElementById('questionsBody')
	tbody.innerHTML = ''
	if (!testId) return
	try {
		const res = await fetch(`/api/teacher/questions?test_id=${testId}`, {
			credentials: 'include',
		})
		if (!res.ok) throw ''
		const qs = await res.json()
		qs.forEach(q => {
			// Основная строка
			const tr = document.createElement('tr')
			tr.innerHTML = `
        <td><input class="edit-text" data-id="${q.id}" value="${
				q.question_text
			}"></td>
        <td>
          <select class="edit-type" data-id="${q.id}">
            <option value="open"${
							q.question_type === 'open' ? ' selected' : ''
						}>Открытый</option>
            <option value="closed"${
							q.question_type === 'closed' ? ' selected' : ''
						}>Закрытый</option>
          </select>
        </td>
        <td>
  <input type="checkbox" class="edit-multi ${
		q.question_type === 'open' ? 'checkbox-disabled' : ''
	}" 
         data-id="${q.id}" 
         ${q.multiple_choice ? 'checked' : ''} 
         ${q.question_type === 'open' ? 'disabled' : ''}>
</td>

        <td>${q.test_id}</td>
        <td>${new Date(q.created_at).toLocaleDateString()}</td>
        <td>
          <button class="manage-options"
                  data-id="${q.id}"
                  data-type="${q.question_type}">
            <i class="fas fa-list"></i> Варианты
          </button>
        </td>
        <td>
          <button class="save-question" data-id="${
						q.id
					}"><i class="fas fa-save"></i> Сохранить</button>
          <button class="del-question"  data-id="${
						q.id
					}"><i class="fas fa-trash"></i> Удалить</button>
        </td>`
			tbody.appendChild(tr)

			// Скрытая строка
			const trOpts = document.createElement('tr')
			trOpts.className = 'options-row'
			trOpts.dataset.qid = q.id
			trOpts.dataset.type = q.question_type
			trOpts.style.display = 'none'

			if (q.question_type === 'closed') {
				trOpts.innerHTML = `
          <td colspan="7">
            <div class="options-wrapper" style="min-height:100px; padding:10px;">
              <table class="options-table">
                <thead><tr><th>Вариант</th><th>Правильный?</th><th>Действия</th></tr></thead>
                <tbody id="opts-${q.id}"></tbody>
              </table>
              <div class="option-form">
                <input type="text" class="new-opt-text" placeholder="Новый вариант">
                <input type="checkbox" class="new-opt-correct">
                <button class="save-new-option" data-id="${q.id}"><i class="fas fa-plus"></i></button>
              </div>
            </div>
          </td>`
			} else {
				trOpts.innerHTML = `
          <td colspan="7">
      <div class="options-wrapper">
        <div class="open-answer-wrapper">
          <label>Правильный ответ:</label>
          <input type="text" class="open-answer-input" value="${
						q.correct_answer_text || ''
					}" />
              <button class="save-open-answer" data-id="${
								q.id
							}">Сохранить</button>
              <button class="delete-open-answer" data-id="${
								q.id
							}">Удалить</button>
            </div>
          </td>`
			}
			tbody.appendChild(trOpts)
		})
	} catch {
		console.error('Ошибка загрузки вопросов')
	}
}

// -----------------------
// initQuestions
// -----------------------
function initQuestions() {
	const select = document.getElementById('testSelect')

	// 1) Загрузка списка тестов
	fetch('/api/teacher/tests', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject()))
		.then(ts => {
			ts.forEach(t => {
				const o = document.createElement('option')
				o.value = t.id
				o.textContent = t.title
				select.appendChild(o)
			})
			if (ts.length) {
				select.value = ts[0].id
				loadQuestions(ts[0].id)
			}
		})
		.catch(err => console.error('Не удалось загрузить тесты', err))

	// 2) При смене выбранного теста — перезагружаем вопросы
	select.addEventListener('change', () => {
		loadQuestions(select.value)
	})

	// 3) Форма добавления нового вопроса
	const form = document.getElementById('newQuestionForm')
	const typeSelect = document.getElementById('newQuestionType')
	const answerInput = document.getElementById('newAnswerInput')
	const multiCheckboxNew = form.querySelector("input[name='multiple_choice']")
	const multiLabel = document.getElementById('multiAnswerLabel')

	typeSelect.addEventListener('change', () => {
		const isOpen = typeSelect.value === 'open'
		answerInput.style.display = isOpen ? 'block' : 'none'
		multiCheckboxNew.checked = false
		multiCheckboxNew.disabled = isOpen

		if (isOpen) {
			multiCheckboxNew.classList.add('checkbox-disabled')
			multiLabel.classList.add('checkbox-disabled')
		} else {
			multiCheckboxNew.classList.remove('checkbox-disabled')
			multiLabel.classList.remove('checkbox-disabled')
		}
	})

	form.addEventListener('submit', async e => {
		e.preventDefault()
		const fd = new FormData(form)
		const payload = {
			test_id: +fd.get('test_id'),
			question_text: fd.get('question_text'),
			question_type: fd.get('question_type'),
			multiple_choice: fd.get('multiple_choice') === 'on',
			correct_answer_text: fd.get('correct_answer_text') || null,
		}
		try {
			const res = await fetch('/api/teacher/questions', {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(payload),
			})
			if (!res.ok) throw new Error(await res.text())
			form.reset()
			answerInput.style.display = 'none'
			loadQuestions(payload.test_id)
		} catch (err) {
			alert('Ошибка создания вопроса: ' + err.message)
		}
	})

	// 4) Изменение типа вопроса прямо в таблице вопросов
	const tbody = document.getElementById('questionsBody')
	tbody.addEventListener('change', e => {
		if (!e.target.matches('.edit-type')) return
		const sel = e.target
		const id = sel.dataset.id
		const row = sel.closest('tr')
		const multiInput = row.querySelector(`.edit-multi[data-id="${id}"]`)
		const optsBtn = row.querySelector(`.manage-options[data-id="${id}"]`)

		if (sel.value === 'open') {
			multiInput.checked = false
			multiInput.disabled = true
			multiInput.classList.add('checkbox-disabled')
			optsBtn.style.display = 'none'
		} else {
			multiInput.disabled = false
			multiInput.classList.remove('checkbox-disabled')
			optsBtn.style.display = 'inline-block'
		}
	})

	// 5) Делегированный обработчик кликов по таблице вопросов
	tbody.addEventListener('click', async e => {
		// a) Переключение панели вариантов/ответа
		if (e.target.closest('.manage-options')) {
			const btn = e.target.closest('.manage-options')
			const qid = btn.dataset.id
			const row = document.querySelector(`.options-row[data-qid="${qid}"]`)
			const isHidden = getComputedStyle(row).display === 'none'
			if (isHidden) {
				if (btn.dataset.type === 'closed') {
					await loadOptions(qid)
				}
				row.style.display = 'table-row'
			} else {
				row.style.display = 'none'
			}
			return
		}

		// b) Сохранение открытого ответа
		if (e.target.matches('.save-open-answer')) {
			console.log('Клик на .save-open-answer', e.target)

			const qid = e.target.dataset.id
			const row = document.querySelector(`.options-row[data-qid="${qid}"]`)
			const answer = row.querySelector('.open-answer-input').value.trim()
			try {
				const res = await fetch('/api/teacher/questions/set_open_answer', {
					method: 'POST',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id: +qid, answer }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Ответ сохранён')
			} catch (err) {
				console.error(err)
				alert('Не удалось сохранить ответ')
			}
			return
		}

		// c) Удаление открытого ответа
		if (e.target.matches('.delete-open-answer')) {
			const qid = e.target.dataset.id
			if (!confirm('Удалить ответ?')) return
			try {
				const res = await fetch('/api/teacher/questions/set_open_answer', {
					method: 'POST',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id: +qid, answer: '' }),
				})
				if (!res.ok) throw new Error(await res.text())
				const row = document.querySelector(`.options-row[data-qid="${qid}"]`)
				row.querySelector('.open-answer-input').value = ''
				alert('Ответ удалён')
			} catch (err) {
				console.error(err)
				alert('Не удалось удалить ответ')
			}
			return
		}

		// d) Другие кнопки: save-question, del-question, save-new-option, save-option, del-option
		// Сохранить отредактированный вопрос
		if (e.target.matches('.save-question')) {
			const qid = e.target.dataset.id
			const row = e.target.closest('tr')
			const text = row
				.querySelector(`.edit-text[data-id="${qid}"]`)
				.value.trim()
			const type = row.querySelector(`.edit-type[data-id="${qid}"]`).value
			const multi = row.querySelector(`.edit-multi[data-id="${qid}"]`).checked
			const payload = {
				id: +qid,
				question_text: text,
				question_type: type,
				multiple_choice: multi,
			}

			// Если тип вопроса — открытый, добавим правильный ответ
			if (type === 'open') {
				const optionsRow = document.querySelector(
					`.options-row[data-qid="${qid}"]`
				)
				if (optionsRow) {
					const input = optionsRow.querySelector('.open-answer-input')
					if (input) {
						payload.correct_answer_text = input.value.trim()
					}
				}
			}
			try {
				const res = await fetch('/api/teacher/questions', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(payload),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Вопрос сохранён')
				loadQuestions(select.value)
			} catch (err) {
				console.error(err)
				alert('Не удалось сохранить вопрос')
			}
			return
		}

		// Удалить вопрос
		if (e.target.matches('.del-question')) {
			const qid = e.target.dataset.id
			if (!confirm('Удалить вопрос?')) return
			try {
				const res = await fetch('/api/teacher/questions', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id: +qid }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Вопрос удалён')
				loadQuestions(select.value)
			} catch (err) {
				console.error(err)
				alert('Не удалось удалить вопрос')
			}
			return
		}

		// Создать новый вариант ответа для закрытого вопроса
		if (e.target.matches('.save-new-option')) {
			const qid = e.target.dataset.id
			const wrapper = document.querySelector(
				`.options-wrapper tbody#opts-${qid}`
			)
			const textEl = wrapper.parentElement.querySelector('.new-opt-text')
			const correctEl = wrapper.parentElement.querySelector('.new-opt-correct')
			const optionText = textEl.value.trim()
			const isCorrect = correctEl.checked
			if (!optionText) {
				alert('Введите текст варианта')
				return
			}
			try {
				const res = await fetch('/api/teacher/options', {
					method: 'POST',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						question_id: +qid,
						option_text: optionText,
						is_correct: isCorrect,
					}),
				})
				if (!res.ok) throw new Error(await res.text())
				textEl.value = ''
				correctEl.checked = false
				await loadOptions(qid)
			} catch (err) {
				console.error(err)
				alert('Не удалось добавить вариант')
			}
			return
		}

		// Сохранить существующий вариант ответа
		if (e.target.matches('.save-option')) {
			const oid = e.target.dataset.id
			const rowOpt = e.target.closest('tr')
			const optionText = rowOpt
				.querySelector(`.edit-opt-text[data-id="${oid}"]`)
				.value.trim()
			const isCorrect = rowOpt.querySelector(
				`.edit-opt-correct[data-id="${oid}"]`
			).checked
			// определим qid по id tbody
			const tbodyOpts = rowOpt.closest('tbody')
			const qid = tbodyOpts.id.split('-')[1]
			try {
				const res = await fetch('/api/teacher/options', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						id: +oid,
						option_text: optionText,
						is_correct: isCorrect,
					}),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Вариант сохранён')
				await loadOptions(qid)
			} catch (err) {
				console.error(err)
				alert('Не удалось сохранить вариант')
			}
			return
		}

		// Удалить существующий вариант ответа
		if (e.target.matches('.del-option')) {
			const oid = e.target.dataset.id
			const rowOpt = e.target.closest('tr')
			const tbodyOpts = rowOpt.closest('tbody')
			const qid = tbodyOpts.id.split('-')[1]
			if (!confirm('Удалить вариант?')) return
			try {
				const res = await fetch('/api/teacher/options', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id: +oid }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Вариант удалён')
				await loadOptions(qid)
			} catch (err) {
				console.error(err)
				alert('Не удалось удалить вариант')
			}
			return
		}
	})
}

// -----------------------
// initCourses
// -----------------------
function initCourses() {
	const tbody = document.getElementById('teacherCoursesBody')
	fetch('/api/teacher/courses', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject(r.statusText)))
		.then(courses => {
			courses.forEach(c => {
				const tr = document.createElement('tr')
				tr.innerHTML = `
          <td><input class="edit-text" data-id="${c.id}" value="${
					c.title
				}"></td>
          <td><input class="edit-text" data-id="${c.id}" value="${
					c.description
				}"></td>
          <td>${new Date(c.created_at).toLocaleDateString()}</td>
          <td>
            <button class="save-course" data-id="${
							c.id
						}"><i class="fas fa-save"></i> Сохранить</button>
            <button class="del-course" data-id="${
							c.id
						}"><i class="fas fa-trash"></i> Удалить</button>
          </td>`
				tbody.appendChild(tr)
			})
		})
		.catch(console.error)

	tbody.addEventListener('click', async e => {
		const btn = e.target.closest('button')
		if (!btn) return
		const id = +btn.dataset.id

		if (btn.classList.contains('save-course')) {
			const inputs = document.querySelectorAll(`.edit-text[data-id="${id}"]`)
			const title = inputs[0].value
			const desc = inputs[1].value
			try {
				const res = await fetch('/api/teacher/courses', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id, title, description: desc }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Курс сохранён')
			} catch (err) {
				alert(err.message)
			}
		}

		if (btn.classList.contains('del-course')) {
			if (!confirm('Удалить курс?')) return
			try {
				const res = await fetch('/api/teacher/courses', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id }),
				})
				if (!res.ok) throw new Error(await res.text())
				btn.closest('tr').remove()
			} catch (err) {
				alert(err.message)
			}
		}
	})

	document
		.getElementById('newTeacherCourseForm')
		.addEventListener('submit', async e => {
			e.preventDefault()
			const fd = new FormData(e.target)
			try {
				const res = await fetch('/api/teacher/courses', {
					method: 'POST',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						title: fd.get('title'),
						description: fd.get('description'),
					}),
				})
				if (!res.ok) throw new Error(await res.text())
				location.reload()
			} catch (err) {
				alert(err.message)
			}
		})
}

// -----------------------
// initTests
// -----------------------
function initTests() {
	const select = document.querySelector('#newTestForm select[name="course_id"]')
	fetch('/api/teacher/courses', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject()))
		.then(cs => {
			cs.forEach(c => {
				const o = document.createElement('option')
				o.value = c.id
				o.textContent = c.title
				select.appendChild(o)
			})
		})
		.catch(console.error)

	const tbody = document.getElementById('testsBody')
	fetch('/api/teacher/tests', { credentials: 'include' })
		.then(r => (r.ok ? r.json() : Promise.reject()))
		.then(ts => {
			ts.forEach(t => {
				const tr = document.createElement('tr')
				tr.innerHTML = `
          <td><input class="edit-text" data-id="${t.id}" value="${
					t.title
				}"></td>
          <td><input class="edit-text" data-id="${t.id}" value="${
					t.description
				}"></td>
          <td>${t.course_id}</td>
          <td>${new Date(t.created_at).toLocaleDateString()}</td>
          <td>
            <button class="save-test" data-id="${
							t.id
						}"><i class="fas fa-save"></i> Сохранить</button>
            <button class="del-test"  data-id="${
							t.id
						}"><i class="fas fa-trash"></i> Удалить</button>
          </td>`
				tbody.appendChild(tr)
			})
		})
		.catch(console.error)

	tbody.addEventListener('click', async e => {
		const btn = e.target.closest('button')
		if (!btn) return
		const id = +btn.dataset.id

		if (btn.classList.contains('save-test')) {
			const inputs = document.querySelectorAll(`.edit-text[data-id="${id}"]`)
			const title = inputs[0].value
			const desc = inputs[1].value
			try {
				const res = await fetch('/api/teacher/tests', {
					method: 'PUT',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id, title, description: desc }),
				})
				if (!res.ok) throw new Error(await res.text())
				alert('Тест сохранён')
			} catch (err) {
				alert(err.message)
			}
		}

		if (btn.classList.contains('del-test')) {
			if (!confirm('Удалить тест?')) return
			try {
				const res = await fetch('/api/teacher/tests', {
					method: 'DELETE',
					credentials: 'include',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ id }),
				})
				if (!res.ok) throw new Error(await res.text())
				btn.closest('tr').remove()
			} catch (err) {
				alert(err.message)
			}
		}
	})

	document.getElementById('newTestForm').addEventListener('submit', async e => {
		e.preventDefault()
		const fd = new FormData(e.target)
		try {
			const res = await fetch('/api/teacher/tests', {
				method: 'POST',
				credentials: 'include',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					title: fd.get('title'),
					description: fd.get('description'),
					course_id: +fd.get('course_id'),
				}),
			})
			if (!res.ok) throw new Error(await res.text())
			const { id: newTestId } = await res.json()
			openQuestionModal(newTestId)
		} catch (err) {
			alert('Ошибка создания теста: ' + err.message)
		}
	})
}

// -----------------------
// Стартуем всё при загрузке страницы
// -----------------------
document.addEventListener('DOMContentLoaded', () => {
	loadUserIcon()
	updateToggleIcon(document.documentElement.getAttribute('data-theme'))
	if (document.getElementById('teacherCoursesBody')) initCourses()
	if (document.getElementById('testsBody')) initTests()
	if (document.getElementById('questionsBody')) initQuestions()
})

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\style.css
/* === RESET & VARIABLES === */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-xs: 0.5rem;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}
body {
	font-family: 'Inter', sans-serif;
	background: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background 0.5s, color 0.5s;
}

/* NAVBAR */
.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: var(--card-bg);
	padding: var(--sp-xs) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
}
.logo {
	font-size: 1.25rem;
	color: var(--primary);
	font-weight: 700;
	cursor: pointer;
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	padding: var(--sp-xs) 0;
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	cursor: pointer;
	font-size: 1.25rem;
	margin-right: var(--sp-sm);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	object-fit: cover;
	cursor: pointer;
	transition: transform var(--trans);
}
.user-icon img:hover {
	transform: scale(1.1);
}

/* PAGE CONTENT */
.page-content {
	max-width: 1200px;
	margin: var(--sp-lg) auto;
	padding: 0 var(--sp-md);
}
.page-content h1 {
	margin-bottom: var(--sp-md);
	color: var(--primary);
	transition: color var(--trans);
}

/* TILES */
.tiles {
	display: flex;
	gap: var(--sp-md);
	flex-wrap: wrap;
	margin-top: var(--sp-lg);
}
.card {
	flex: 1 1 30%;
	background: var(--primary);
	color: var(--bg);
	text-align: center;
	padding: var(--sp-lg) var(--sp-md);
	border-radius: var(--radius);
	text-decoration: none;
	font-size: 1.2rem;
	transition: background var(--trans);
}
.card:hover {
	background: #3c3bd1;
}

/* FORM GRID */
.course-form {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) auto;
	gap: var(--sp-sm);
	margin-top: var(--sp-md);
	align-items: end;
}
.course-form input,
.course-form select {
	padding: var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--card-bg);
	transition: border-color var(--trans);
	color: var(--text);
}
.course-form input:focus,
.course-form select:focus {
	outline: none;
	border-color: var(--primary);
}
.course-form label {
	display: flex;
	align-items: center;
	gap: var(--sp-xs);
}
.course-form button {
	display: flex;
	align-items: center;
	gap: var(--sp-xs);
	padding: var(--sp-sm) var(--sp-md);
	background: var(--primary);
	color: var(--bg);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
}
.course-form button:hover {
	opacity: 0.9;
}

/* TABLE WRAPPER */
.table-wrapper {
	margin-top: var(--sp-md);
	overflow-x: auto;
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}
.table-wrapper table {
	width: 100%;
	border-collapse: collapse;
	table-layout: auto;
}
.table-wrapper th,
.table-wrapper td {
	padding: var(--sp-sm) var(--sp-md);
	text-align: left;
	white-space: nowrap;
}
.table-wrapper thead {
	background: var(--primary);
}
.table-wrapper thead th {
	color: var(--bg);
	font-weight: 600;
}
.table-wrapper thead th:first-child {
	border-top-left-radius: var(--radius);
}
.table-wrapper thead th:last-child {
	border-top-right-radius: var(--radius);
}
.table-wrapper tbody tr:nth-child(odd) {
	background: var(--bg);
}
.table-wrapper tbody tr:nth-child(even) {
	background: var(--border);
}
.table-wrapper tbody tr:hover {
	background: rgba(79, 70, 229, 0.1);
}
.table-wrapper tbody tr:last-child td:first-child {
	border-bottom-left-radius: var(--radius);
}
.table-wrapper tbody tr:last-child td:last-child {
	border-bottom-right-radius: var(--radius);
}

/* CRUD BUTTONS */
button.save-course,
button.save-open-answer,
button.save-test,
button.save-question,
button.save-option,
button.save-new-option,
button.manage-options {
	background: var(--primary);
	color: var(--bg);
	border: none;
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
	margin-right: var(--sp-xs);
}
button.save-course:hover,
button.save-test:hover,
button.save-question:hover,
button.save-option:hover,
button.save-new-option:hover,
button.manage-options:hover {
	opacity: 0.8;
}
button.del-course,
button.del-test,
button.delete-open-answer,
button.del-question,
button.del-option {
	background: transparent;
	border: 1px solid var(--text-muted);
	color: var(--text-muted);
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
	cursor: pointer;
	transition: background var(--trans), color var(--trans), opacity var(--trans);
}
button.del-course:hover,
button.del-test:hover,
button.del-question:hover,
button.del-option:hover {
	background: var(--text-muted);
	color: var(--bg);
	opacity: 0.8;
}

/* EDITABLE FIELDS */
.edit-opt-text,
input.edit-text {
	width: 100%;
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--bg);
	color: var(--text);
	transition: border-color var(--trans), background var(--trans),
		color var(--trans);
}
input.edit-text:focus {
	outline: none;
	border-color: var(--primary);
	box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

/* SELECT & CHECKBOX */
select.edit-type {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	color: var(--text);
	padding: var(--sp-xs) var(--sp-sm);
	background: var(--card-bg)
		url("data:image/svg+xml;charset=UTF-8,%3Csvg width='10' height='6' viewBox='0 0 10 6' fill='none'%3E%3Cpath d='M0 0l5 6l5-6' stroke='%23999' stroke-width='1.2'/%3E%3C/svg%3E")
		no-repeat right var(--sp-sm) center / 0.6em;
	border: 1px solid var(--border);
	border-radius: var(--radius);
	cursor: pointer;
	transition: border-color var(--trans), box-shadow var(--trans);
}
select.edit-type:focus {
	outline: none;
	border-color: var(--primary);
	box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}
input.edit-multi[type='checkbox'] {
	transform: scale(1.2);
	cursor: pointer;
}

/* OPTIONS WRAPPER */
.options-wrapper {
	position: relative;
	z-index: 1; /* создаём контекст наложения */
}

.options-row .options-wrapper {
	/* display: none; */
	padding: var(--sp-sm);
	margin-top: var(--sp-md);
	background: var(--bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	overflow-x: auto;
}
.options-table {
	width: 100%;
	border-collapse: collapse;
	margin-bottom: var(--sp-sm);
}
.options-table th {
	background-color: var(--primary);
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	text-align: left;
	white-space: nowrap;
}

.options-table td {
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	text-align: left;
	white-space: nowrap;
}
.options-table thead {
	background: var(--primary);
	position: sticky;
	top: 0;
	z-index: 2;
}
.options-table thead th {
	color: var(--bg);
	font-weight: 600;
	padding: var(--sp-sm) var(--sp-md);
}

/* === Вложенная таблица вариантов: теперь полностью как основная === */
.options-wrapper table.options-table {
	/* ширина и раскладка */
	width: 100%;
	min-width: auto;
	border-collapse: collapse;
	table-layout: auto;

	/* визуальные рамки и фон */
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);

	margin-bottom: var(--sp-sm);
}

/* ячейки */
.options-wrapper table.options-table th,
.options-wrapper table.options-table td {
	padding: var(--sp-sm) var(--sp-md);
	text-align: left;
	white-space: nowrap;
	border: 1px solid var(--border);
}

/* шапка */
.options-wrapper table.options-table thead {
	opacity: 1 !important;
	visibility: visible !important;
	display: table-header-group !important;
	background: rgba(255, 255, 255, 0.95); /* полупрозрачный фон */
	border: 1px solid red;
	position: sticky;
	top: 0;
	z-index: 10; /* выше других ячеек */
}
.options-wrapper table.options-table thead th {
	color: var(--bg);
	font-weight: 600;
}
/* скругляем уголки шапки */
.options-wrapper table.options-table thead th:first-child {
	border-top-left-radius: var(--radius);
}
.options-wrapper table.options-table thead th:last-child {
	border-top-right-radius: var(--radius);
}

/* зебра-через-одну строк */
.options-wrapper table.options-table tbody tr:nth-child(odd) {
	background: var(--bg);
}
.options-wrapper table.options-table tbody tr:nth-child(even) {
	background: var(--border);
}

/* скругляем уголки последней строки */
.options-wrapper table.options-table tbody tr:last-child td:first-child {
	border-bottom-left-radius: var(--radius);
}
.options-wrapper table.options-table tbody tr:last-child td:last-child {
	border-bottom-right-radius: var(--radius);
}

/* Шапка таблицы — стиль как у основной */
.options-wrapper table.options-table thead {
	background-color: var(--primary);
}

.options-wrapper table.options-table thead th {
	color: var(--bg); /* светлый текст */
	font-weight: 600;
	padding: var(--sp-sm) var(--sp-md);
	text-align: left;
	white-space: nowrap;
	border: 1px solid var(--border);
}

/* Скругление углов */
.options-wrapper table.options-table thead th:first-child {
	border-top-left-radius: var(--radius);
}
.options-wrapper table.options-table thead th:last-child {
	border-top-right-radius: var(--radius);
}

/* NEW OPTION FORM */
.option-form {
	display: grid;
	grid-template-columns: 1fr auto auto;
	gap: var(--sp-sm);
	align-items: center;
	margin-top: var(--sp-sm);
}
.option-form input[type='text'] {
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	width: 100%;
}
.option-form input[type='checkbox'] {
	transform: scale(1.2);
	margin-left: var(--sp-xs);
	cursor: pointer;
}
.option-form button {
	padding: var(--sp-xs) var(--sp-sm);
	background: var(--primary);
	color: var(--bg);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
}
.option-form button:hover {
	opacity: 0.8;
}

/* ======== МОДАЛЬНОЕ ОКНО ======== */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: 2000;
}

.modal {
	background: var(--card-bg);
	color: var(--text);
	width: 90%;
	max-width: 600px;
	border-radius: var(--radius);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
	overflow: hidden;
	display: flex;
	flex-direction: column;
}

.modal-header,
.modal-footer {
	padding: var(--sp-sm) var(--sp-md);
	background: var(--primary);
	color: var(--bg);
	display: flex;
	align-items: center;
	justify-content: space-between;
}

.modal-header h3 {
	margin: 0;
	font-size: 1.25rem;
}

.modal-close {
	background: none;
	border: none;
	font-size: 1.5rem;
	color: var(--bg);
	cursor: pointer;
	line-height: 1;
}

.modal-body {
	padding: var(--sp-md);
	max-height: 60vh;
	overflow-y: auto;
}

/* Форма быстрого добавления */
.quick-form .form-group {
	margin-bottom: var(--sp-md);
}
.quick-form .form-group.inline {
	display: flex;
	align-items: center;
	gap: var(--sp-md);
}
.quick-form label {
	font-weight: 500;
}
.quick-form textarea,
.quick-form select,
.quick-form input[type='text'] {
	width: 100%;
	padding: var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--card-bg);
	color: var(--text);
	transition: border-color var(--trans);
}
.quick-form textarea:focus,
.quick-form select:focus {
	outline: none;
	border-color: var(--bg);
}
.btn {
	display: inline-flex;
	align-items: center;
	gap: var(--sp-xs);
	padding: var(--sp-xs) var(--sp-sm);
	background: var(--primary);
	color: var(--bg);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: opacity var(--trans);
}
.btn:hover {
	opacity: 0.8;
}

/* Список вопросов внутри модалки */
.quick-questions-list {
	list-style: none;
	margin: 0;
	padding: 0;
	max-height: 25vh;
	overflow-y: auto;
	border-top: 1px solid var(--border);
}
.quick-questions-list .question-item {
	padding: var(--sp-sm);
	margin: 0;
	border-bottom: 1px solid var(--border);
	display: flex;
	align-items: center;
	justify-content: space-between;
	position: relative;
}
.question-item .question-text {
	flex: 1;
	margin-right: var(--sp-md);
}
.question-item .expand-options {
	background: var(--primary);
	color: var(--bg);
	border: none;
	border-radius: 50%;
	width: 1.5rem;
	height: 1.5rem;
	font-size: 1rem;
	line-height: 1;
	cursor: pointer;
}

/* — Основной контейнер вопроса — */
.question-item {
	display: flex;
	flex-direction: column;
}

/* 2) шапка с текстом + кнопкой */
.question-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	width: 100%;
}

/* — Верхняя строка: вопрос + плюсик — */
.question-item .question-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

/* текст вопроса — не блочный, чтобы не «ломал» flex */
.question-header .question-text {
	display: inline-block; /* или просто оставить span по умолчанию */
	margin: 0; /* сбросьте любые внешние отступы */
	flex: 1; /* чтобы вопрос занимал всё свободное место */
}

.question-header .expand-options {
	flex: 0 0 auto;
	margin-left: var(--sp-sm);
}

/* конструктор вариантов — скрыт по умолчанию и всегда снизу */
.options-builder {
	display: none;
	margin-top: var(--sp-sm);
	clear: both; /* на всякий случай */
	width: 100%;
	/* ваши существующие стили… */
	padding: var(--sp-sm);
	background: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
}

.question-item.expanded > .options-builder {
	display: block;
}

/* — При открытии (когда .question-item получает .expanded) — */
.question-item.expanded > .options-builder {
	display: block;
}

.options-list {
	list-style: none;
	margin: 0 0 var(--sp-sm) 0;
	padding: 0;
}
.options-list .option-item {
	display: flex;
	align-items: center;
	gap: var(--sp-md);
	margin-bottom: var(--sp-xs);
}
.options-list .option-text {
	flex: 1;
}
.new-option-form {
	display: flex;
	align-items: center;
	gap: var(--sp-sm);
}
.new-option-form input[type='text'] {
	flex: 1;
	padding: var(--sp-xs);
	border: 1px solid var(--border);
	border-radius: var(--radius);
}
.new-option-form label {
	display: flex;
	align-items: center;
	gap: var(--sp-xs);
}
.new-option-form button {
	background: var(--primary);
	color: var(--bg);
	border: none;
	padding: var(--sp-xs) var(--sp-sm);
	border-radius: var(--radius);
}

/* Кнопка "Сохранить все вопросы" */
.save-questions {
	margin: var(--sp-sm) var(--sp-md);
}
.save-questions[disabled] {
	opacity: 0.4;
	cursor: not-allowed;
}

/* Подтверждение закрытия без сохранения */
.unsaved-confirm {
	position: absolute;
	top: var(--sp-sm);
	right: var(--sp-sm);
	background: var(--card-bg);
	color: var(--text);
	border: 1px solid var(--primary);
	border-radius: var(--radius);
	padding: var(--sp-sm);
	box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
	animation: fadeIn 0.3s ease;
}
.unsaved-confirm p {
	margin-bottom: var(--sp-sm);
}
.unsaved-confirm button {
	margin-right: var(--sp-sm);
	padding: var(--sp-xs) var(--sp-sm);
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
}
@keyframes fadeIn {
	from {
		opacity: 0;
		transform: translateY(-10px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

.popover {
	z-index: -1 !important;
	position: absolute !important;
	pointer-events: none !important;
	background: transparent !important;
}

table.variant-table thead {
	opacity: 1 !important;
	visibility: visible !important;
	display: table-header-group !important;
}

/* Обёртка, чтобы кнопки и поле располагались аккуратно */
.open-answer-wrapper {
	display: flex;
	flex-wrap: wrap; /* Перенос строк, если места мало */
	gap: var(--sp-sm); /* Расстояние между элементами */
	align-items: center; /* Выравнивание по центру по вертикали */
}

/* Сама текстовая область */
.open-answer-input {
	flex: 1; /* Занимает всё доступное место */
	min-width: 200px; /* Минимальная ширина для удобства */
	max-width: 400px; /* Максимальная ширина */
	width: 100%; /* Чтобы flex:1 работал корректно */
	box-sizing: border-box; /* Включаем padding и border в ширину */
	padding: var(--sp-xs) var(--sp-sm);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	background: var(--bg);
	color: var(--text);
	transition: border-color var(--trans), background var(--trans),
		color var(--trans);
}

.checkbox-disabled {
	opacity: 0.6;
	pointer-events: none;
}

.multi-answer-label.checkbox-disabled {
	opacity: 0.4;
	pointer-events: none;
}

/* ======= END MODAL STYLES ======= */

/* MOBILE */
@media (max-width: 600px) {
	.course-form {
		grid-template-columns: 1fr;
	}
	.table-wrapper {
		overflow-x: auto;
	}
	.nav-links {
		flex-direction: column;
		gap: var(--sp-xs);
	}
}

Файл: C:\dev\projects\html\Курсовая работа\static\teacherPanel\tests.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Панель учителя — Тесты</title>
		<script src="/static/js/theme-init.js"></script>
		<link rel="stylesheet" href="/static/teacherPanel/style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
		/>
		<script src="/static/teacherPanel/script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo" onclick="navigate('index.html')">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/index.html">Главная</a>
				<a href="index.html">Панель учителя</a>
				<a href="courses.html">Курсы</a>
				<a href="tests.html" class="active">Тесты</a>
				<a href="questions.html">Вопросы</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="userDefault" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1>Управление тестами</h1>

			<form id="newTestForm" class="course-form">
				<select name="course_id" required>
					<option value="">Выберите курс</option>
				</select>
				<input name="title" placeholder="Название теста" required />
				<input name="description" placeholder="Описание теста" required />
				<button type="submit"><i class="fas fa-plus"></i> Добавить</button>
			</form>

			<div class="table-wrapper">
				<table id="testsTable">
					<thead>
						<tr>
							<th>Название</th>
							<th>Описание</th>
							<th>Курс ID</th>
							<th>Дата создания</th>
							<th>Действия</th>
						</tr>
					</thead>
					<tbody id="testsBody"></tbody>
				</table>
			</div>
		</main>

		<!-- Быстрая модалка добавления вопросов к только что созданному тесту -->
		<div id="questionModal" class="modal-overlay" style="display: none">
			<div class="modal">
				<div class="modal-header">
					<h3>Добавить вопросы</h3>
					<button class="modal-close" id="closeQuestionModal">&times;</button>
				</div>
				<div class="modal-body">
					<form id="quickQuestionForm" class="quick-form">
						<input type="hidden" id="quickTestId" name="test_id" />
						<div class="form-group">
							<label for="question_text">Текст вопроса</label>
							<textarea
								id="question_text"
								name="question_text"
								required
							></textarea>
						</div>
						<div class="form-group inline">
							<label for="question_type">Тип вопроса</label>
							<select id="question_type" name="question_type">
								<option value="open">Открытый</option>
								<option value="closed">Закрытый</option>
							</select>
							<label>
								<input
									type="checkbox"
									id="multiple_choice"
									name="multiple_choice"
								/>
								Несколько ответов
							</label>
						</div>
						<button type="submit" class="btn add-question">
							<i class="fas fa-plus"></i> Добавить
						</button>
					</form>
					<ul id="quickQuestionsList" class="quick-questions-list"></ul>
				</div>
				<div class="modal-footer">
					<button class="btn save-questions" id="saveQuickQuestions" disabled>
						<i class="fas fa-save"></i> Сохранить всё
					</button>
				</div>
				<div id="unsavedConfirm" class="unsaved-confirm" style="display: none">
					<p>Вы не сохранили изменения</p>
					<button class="btn confirm-close" id="forceClose">
						Всё равно закрыть
					</button>
					<button class="btn cancel-close" id="cancelClose">Отмена</button>
				</div>
			</div>
		</div>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\theory\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Теория — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<!-- 2. Стили -->
		<link rel="stylesheet" href="style.css" />
		<!-- 3. Логика страницы -->
		<script src="script.js" defer></script>
	</head>
	<body>
		<header class="navbar">
			<div class="logo">Set Learn</div>
			<nav class="nav-links">
				<a href="/static/mainPage/">Главная</a>
				<a href="/static/courses/">Курсы</a>
				<a
					href="/static/adminPanel/index.html"
					id="nav-admin"
					style="display: none"
					>Панель админа</a
				>
				<a href="/static/teacherPanel/" id="nav-teacher" style="display: none"
					>Панель учителя</a
				>
				<a href="#" class="active">Теория</a>
			</nav>
			<div class="actions">
				<button id="theme-toggle" aria-label="Переключить тему"></button>
				<div class="user-icon" onclick="navigate('/profile')">
					<img src="/static/img/userDefault.png" alt="avatar" />
				</div>
			</div>
		</header>

		<main class="page-content">
			<h1 id="title">Загрузка...</h1>
			<article id="content">
				<!-- сюда подгрузится текст из БД -->
			</article>
			<button id="go-to-questions">Перейти к тестам</button>
		</main>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\theory\script.js
// Сенарий: подгрузка одного раздела теории
// Навигация и тема берём из глобальных утилит
function navigate(url) {
	window.location.href = url
}

async function loadUserIcon() {
	try {
		const res = await fetch('/api/profile', { credentials: 'same-origin' })
		if (!res.ok) return
		const user = await res.json()
		if (user.avatar_path) {
			document.querySelector('.user-icon img').src = user.avatar_path
		}
		if (user.role === 'admin')
			document.getElementById('nav-admin').style.display = 'flex'
		if (user.role === 'teacher')
			document.getElementById('nav-teacher').style.display = 'inline-block'
	} catch {}
}

function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	if (!btn) return
	btn.innerHTML = `<img src="/static/img/${
		theme === 'dark' ? 'light' : 'dark'
	}-theme.png" alt="toggle"/>`
}
function initTheme() {
	const stored = localStorage.getItem('theme')
	const prefers = window.matchMedia('(prefers-color-scheme: dark)').matches
		? 'dark'
		: 'light'
	const theme = stored || prefers
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)
	document.getElementById('theme-toggle').addEventListener('click', () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	})
}

document.addEventListener('DOMContentLoaded', async () => {
	initTheme()
	await loadUserIcon()

	// Параметр ?topic=ID
	const params = new URLSearchParams(location.search)
	const id = params.get('topic')
	if (!id) {
		document.getElementById('content').textContent = 'Тема не указана.'
		return
	}

	try {
		const res = await fetch(`/api/theory/${id}/with-tests`, {
			credentials: 'same-origin',
		})
		if (!res.ok) throw new Error()
		const data = await res.json()

		// Выводим теорию
		document.getElementById('title').textContent = data.title
		document.getElementById('content').innerHTML = data.content

		// Проверяем наличие тестов
		const qBtn = document.getElementById('go-to-questions')
		if (data.tests && data.tests.length > 0) {
			qBtn.style.display = 'inline-block'
			qBtn.addEventListener('click', () => {
				window.location.href = `/static/questions/?test=${data.tests[0].id}`
			})
		} else {
			qBtn.style.display = 'none'
		}
	} catch (err) {
		console.error(err)
		document.getElementById('content').textContent = 'Ошибка загрузки теории.'
	}
})

Файл: C:\dev\projects\html\Курсовая работа\static\theory\style.css
/* Скопировано и слегка адаптировано из вашего общего style.css */

*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #fff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--sp-lg: 2rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

body {
	font-family: 'Inter', sans-serif;
	background: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background 0.5s ease, color 0.5s ease;
}

.navbar {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: var(--card-bg);
	padding: var(--sp-sm) var(--sp-md);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
}
.logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--primary);
}
.nav-links {
	display: flex;
	gap: var(--sp-md);
}
.nav-links a {
	position: relative;
	text-decoration: none;
	color: var(--text-muted);
	font-weight: 500;
	transition: color var(--trans);
}
.nav-links a.active,
.nav-links a:hover {
	color: var(--primary);
}
.nav-links a.active::after,
.nav-links a:hover::after {
	content: '';
	position: absolute;
	left: 0;
	bottom: -2px;
	width: 100%;
	height: 2px;
	background: var(--primary);
}
.actions {
	display: flex;
	align-items: center;
}
#theme-toggle {
	background: none;
	border: none;
	cursor: pointer;
	margin-right: var(--sp-sm);
}
.user-icon img {
	width: 2rem;
	height: 2rem;
	border-radius: 50%;
	cursor: pointer;
}

.page-content {
	max-width: 800px;
	margin: var(--sp-lg) auto;
	padding: 0 var(--sp-md);
	text-align: left;
}
#title {
	margin-bottom: var(--sp-md);
	color: var(--primary);
}
#content {
	line-height: 1.6;
	margin-bottom: var(--sp-lg);
}
#go-to-questions {
	display: inline-block;
	padding: var(--sp-sm) var(--sp-md);
	background: var(--primary);
	color: #fff;
	border: none;
	border-radius: var(--radius);
	cursor: pointer;
	transition: transform var(--trans), box-shadow var(--trans);
}
#go-to-questions:hover {
	transform: translateY(-2px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

Файл: C:\dev\projects\html\Курсовая работа\static\welcomeMainPage\index.html
<!DOCTYPE html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Главная — Set Learn</title>

		<!-- 1. Сначала — инициализация темы -->
		<script src="/static/js/theme-init.js"></script>

		<link rel="stylesheet" href="style.css" />
		<script src="script.js" defer></script>
	</head>
	<body>
		<!-- Навигационная панель для незарегистрированных -->
		<header class="navbar">
			<div class="actions">
				<!-- Переключатель темы -->
				<button id="theme-toggle" aria-label="Переключить тему">
					<img src="/static/img/dark-theme.png" alt="dark-theme-toggle" />
				</button>
			</div>
			<!-- Ссылка на страницу входа/регистрации -->
			<div class="auth-link">
				<a href="/static/loginPage/">Зарегистрироваться/Войти</a>
			</div>
		</header>

		<!-- Основной контент: плитки закрытого доступа -->
		<main class="container">
			<div class="tile" data-title="Пошаговая анимация">
				<h2><span class="lock-icon">🔒</span>Пошаговая анимация</h2>
				<p>
					Просмотр интерактивной демонстрации ассоциативного свойства множеств
				</p>
			</div>
			<div class="tile" data-title="Курсы">
				<h2><span class="lock-icon">🔒</span>Курсы</h2>
				<p>Курсы по темам, которые вы проходите на данный момент</p>
			</div>
			<div class="tile" data-title="Тесты">
				<h2><span class="lock-icon">🔒</span>Тесты</h2>
				<p>Тесты, которые вам доступны на данный момент</p>
			</div>
			<div class="tile" data-title="Лидерборд">
				<h2><span class="lock-icon">🔒</span>Лидерборд</h2>
			</div>
			<div class="tile" data-title="Теория">
				<h2><span class="lock-icon">🔒</span>Теория</h2>
			</div>
		</main>

		<!-- Модальное окно с уведомлением о регистрации -->
		<div id="access-modal" class="modal">
			<div class="modal-content">
				<span class="close">&times;</span>
				<p>
					Для получения доступа необходимо
					<a href="/static/loginPage/">зарегистрироваться или войти</a>.
				</p>
			</div>
		</div>
	</body>
</html>

Файл: C:\dev\projects\html\Курсовая работа\static\welcomeMainPage\script.js
// Показ/скрытие модального окна доступа
function toggleModal(open) {
	document.getElementById('access-modal').classList.toggle('open', open)
}

// Обновление иконки темы
function updateToggleIcon(theme) {
	const btn = document.getElementById('theme-toggle')
	// Очищаем содержимое кнопки
	btn.innerHTML = ''

	// Создаём элемент изображения
	const icon = document.createElement('img')
	icon.alt = 'Toggle theme' // Альтернативный текст для доступности

	// Устанавливаем путь к изображению в зависимости от темы
	icon.src =
		theme === 'dark'
			? '/static/img/light-theme.png'
			: '/static/img/dark-theme.png'

	// Добавляем изображение в кнопку
	btn.appendChild(icon)
}

document.addEventListener('DOMContentLoaded', () => {
	// Клик по плиткам показывает попап
	document
		.querySelectorAll('.tile')
		.forEach(tile => tile.addEventListener('click', () => toggleModal(true)))

	// Закрытие по крестику
	document
		.querySelector('.modal .close')
		.addEventListener('click', () => toggleModal(false))

	// Закрытие кликом вне окна
	document.getElementById('access-modal').addEventListener('click', e => {
		if (e.target.id === 'access-modal') toggleModal(false)
	})

	// Инициализация темы
	const saved = localStorage.getItem('theme')
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
	const theme = saved || (prefersDark ? 'dark' : 'light')
	document.documentElement.setAttribute('data-theme', theme)
	updateToggleIcon(theme)

	// Переключатель темы
	document.getElementById('theme-toggle').addEventListener('click', () => {
		const next =
			document.documentElement.getAttribute('data-theme') === 'dark'
				? 'light'
				: 'dark'
		document.documentElement.setAttribute('data-theme', next)
		localStorage.setItem('theme', next)
		updateToggleIcon(next)
	})
})

Файл: C:\dev\projects\html\Курсовая работа\static\welcomeMainPage\style.css
/* RESET & VARIABLES */
*,
*::before,
*::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 16px;
	scroll-behavior: smooth;
}
body {
	font-family: 'Inter', sans-serif;
	background-color: var(--bg);
	color: var(--text);
	min-height: 100vh;
	transition: background-color 0.5s ease, color 0.5s ease;
}

/* THEME PALETTE */
:root {
	--bg: #f9fafb;
	--text: #1f2937;
	--card-bg: #ffffff;
	--border: #e5e7eb;
	--primary: #4f46e5;
	--text-muted: #6b7280;
	--sp-sm: 1rem;
	--sp-md: 1.5rem;
	--radius: 0.5rem;
	--trans: 0.3s ease;
}
:root[data-theme='dark'] {
	--bg: #1f2937;
	--text: #f9fafb;
	--card-bg: #2d3748;
	--border: #4a5568;
	--primary: #a78bfa;
	--text-muted: #a0aec0;
}

/* NAVBAR */
.navbar {
	display: flex;
	justify-content: flex-end;
	align-items: center;
	background-color: var(--card-bg);
	padding: var(--sp-sm);
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
	position: sticky;
	top: 0;
	z-index: 100;
	transition: background-color 0.5s ease;
}
.actions {
	margin-right: var(--sp-md);
}
#theme-toggle {
	background: none;
	border: none;
	font-size: 1.25rem;
	cursor: pointer;
	transition: transform var(--trans);
}
#theme-toggle:hover {
	transform: scale(1.1);
}

.auth-link a {
	color: var(--primary);
	font-weight: 600;
	text-decoration: none;
	transition: color var(--trans);
}
.auth-link a:hover {
	color: var(--text);
}

/* GRID */
.container {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
	gap: var(--sp-md);
	padding: var(--sp-md);
}

/* TILE */
.tile {
	background-color: var(--card-bg);
	border: 1px solid var(--border);
	border-radius: var(--radius);
	padding: var(--sp-md);
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	cursor: pointer;
	transition: transform var(--trans), box-shadow var(--trans);
}
.tile:hover {
	transform: translateY(-4px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
.lock-icon {
	margin-right: 0.5rem;
}

/* MODAL */
.modal {
	display: none;
	position: fixed;
	inset: 0;
	background: rgba(0, 0, 0, 0.4);
	align-items: center;
	justify-content: center;
	z-index: 200;
}
.modal.open {
	display: flex;
}
.modal-content {
	position: relative; /* нужно для абсолютного позиционирования крестика */
	padding: 2.5rem var(--sp-md) var(--sp-md);
	border-radius: var(--radius);
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
	max-width: 90%;
	background-color: var(--card-bg);
	display: flex;
	flex-direction: column;
	align-items: center;
	text-align: center;
}
.modal-content p a {
	color: var(--primary);
	font-weight: 600;
	text-decoration: none;
}
.modal-content .close {
	position: absolute;
	top: 1rem;
	right: 1rem;
	font-size: 1.5rem;
	cursor: pointer;
}

Файл: C:\dev\projects\html\Курсовая работа\handlers.go
package main

import (
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// UserInfo — модель для вывода в админке
type UserInfo struct {
	ID        int       `json:"id"`
	Email     string    `json:"email"`
	FullName  string    `json:"full_name"`
	Role      string    `json:"role"`
	IsActive  bool      `json:"is_active"`
	LastLogin time.Time `json:"last_login"`
}

// CourseInfo — структура для админ‑панели
type CourseInfo struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	TeacherID   int       `json:"teacher_id"`
	CreatedAt   time.Time `json:"created_at"`
}

// TestInfo — структура для панели учителя
type TestInfo struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CourseID    int       `json:"course_id"`
	CreatedAt   time.Time `json:"created_at"`
}

type QuestionInfo struct {
	ID                int            `json:"id"`
	TestID            int            `json:"test_id"`
	QuestionText      string         `json:"question_text"`
	QuestionType      string         `json:"question_type"`
	MultipleChoice    bool           `json:"multiple_choice"`
	CreatedAt         time.Time      `json:"created_at"`
	CorrectAnswerText sql.NullString `json:"-"` // временно скрываем
	Options           []OptionInfo   `json:"options,omitempty"`
}

type QuestionInfoOut struct {
	QuestionInfo
	CorrectAnswerText string `json:"correct_answer_text,omitempty"`
}

type OptionInfo struct {
	ID         int       `json:"id"`
	QuestionID int       `json:"question_id"`
	OptionText string    `json:"option_text"`
	IsCorrect  bool      `json:"is_correct"`
	CreatedAt  time.Time `json:"created_at"`
}

type teacherQuestionRequest struct {
	ID                int    `json:"id,omitempty"`
	TestID            int    `json:"test_id"`
	QuestionText      string `json:"question_text"`
	QuestionType      string `json:"question_type"`
	MultipleChoice    bool   `json:"multiple_choice"`
	CorrectAnswerText string `json:"correct_answer_text"`
}

// adminUsersHandler — GET/PUT/DELETE: список, обновление роли и удаление пользователя
func adminUsersHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	// 1) GET — вернуть JSON‑массив всех пользователей
	case http.MethodGet:
		rows, err := db.Query(`
            SELECT id, email, full_name, role,
                   (now() - last_login) < interval '5 minutes' AS is_active,
                   last_login
            FROM users
            ORDER BY id
        `)
		if err != nil {
			http.Error(w, "Database error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var users []UserInfo
		for rows.Next() {
			var u UserInfo
			if err := rows.Scan(
				&u.ID, &u.Email, &u.FullName, &u.Role,
				&u.IsActive, &u.LastLogin,
			); err != nil {
				http.Error(w, "Scan error: "+err.Error(), http.StatusInternalServerError)
				return
			}
			users = append(users, u)
		}
		if err := rows.Err(); err != nil {
			http.Error(w, "Rows error: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(users)

	// 2) PUT — изменить роль пользователя
	case http.MethodPut:
		var req struct {
			ID   int    `json:"id"`
			Role string `json:"role"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем корректность роли
		switch req.Role {
		case "student", "teacher", "admin":
		default:
			http.Error(w, "Invalid role", http.StatusBadRequest)
			return
		}
		res, err := db.Exec(
			"UPDATE users SET role = $1 WHERE id = $2",
			req.Role, req.ID,
		)
		if err != nil {
			http.Error(w, "DB error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "User not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// 3) DELETE — удалить пользователя
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		res, err := db.Exec("DELETE FROM users WHERE id = $1", req.ID)
		if err != nil {
			http.Error(w, "DB error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "User not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// 4) Всё остальное — метод не поддерживается
	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}

// adminCoursesHandler — GET/POST/PUT/DELETE для /api/admin/courses
func adminCoursesHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {

	// 1) GET — вернуть список всех курсов
	case http.MethodGet:
		rows, err := db.Query(`
            SELECT id, title, description, teacher_id, created_at
            FROM courses
            ORDER BY created_at DESC
        `)
		if err != nil {
			http.Error(w, "DB error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var list []CourseInfo
		for rows.Next() {
			var c CourseInfo
			if err := rows.Scan(&c.ID, &c.Title, &c.Description, &c.TeacherID, &c.CreatedAt); err != nil {
				http.Error(w, "Scan error: "+err.Error(), http.StatusInternalServerError)
				return
			}
			list = append(list, c)
		}
		if err := rows.Err(); err != nil {
			http.Error(w, "Rows error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(list)

	// 2) POST — создать новый курс
	case http.MethodPost:
		var req struct {
			Title       string `json:"title"`
			Description string `json:"description"`
			TeacherID   int    `json:"teacher_id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input: "+err.Error(), http.StatusBadRequest)
			return
		}
		var newID int
		err := db.QueryRow(
			`INSERT INTO courses (title, description, teacher_id)
             VALUES ($1,$2,$3) RETURNING id`,
			req.Title, req.Description, req.TeacherID,
		).Scan(&newID)
		if err != nil {
			http.Error(w, "Insert error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]int{"id": newID})

	// 3) PUT — обновить курс
	case http.MethodPut:
		var req CourseInfo
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input: "+err.Error(), http.StatusBadRequest)
			return
		}
		res, err := db.Exec(
			`UPDATE courses
             SET title=$1, description=$2, teacher_id=$3
             WHERE id=$4`,
			req.Title, req.Description, req.TeacherID, req.ID,
		)
		if err != nil {
			http.Error(w, "Update error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "Course not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// 4) DELETE — удалить курс
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input: "+err.Error(), http.StatusBadRequest)
			return
		}
		res, err := db.Exec("DELETE FROM courses WHERE id=$1", req.ID)
		if err != nil {
			http.Error(w, "Delete error: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "Course not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}

// teacherCoursesHandler — CRUD курсов для текущего учителя
func teacherCoursesHandler(w http.ResponseWriter, r *http.Request) {
	// 1) Извлекаем claims из контекста
	claims := getClaims(r.Context())
	if claims == nil {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}

	// 2) Находим ID учителя по email из токена
	var teacherID int
	err := db.QueryRow(
		"SELECT id FROM users WHERE email = $1",
		claims.Email,
	).Scan(&teacherID)
	if err != nil {
		http.Error(w, "User not found", http.StatusInternalServerError)
		return
	}

	switch r.Method {

	// GET /api/teacher/courses — список своих курсов
	case http.MethodGet:
		rows, err := db.Query(`
            SELECT id, title, description, teacher_id, created_at
            FROM courses
            WHERE teacher_id = $1
            ORDER BY created_at DESC
        `, teacherID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var list []CourseInfo
		for rows.Next() {
			var c CourseInfo
			if err := rows.Scan(&c.ID, &c.Title, &c.Description, &c.TeacherID, &c.CreatedAt); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
			list = append(list, c)
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(list)

	// POST /api/teacher/courses — создать новый курс
	case http.MethodPost:
		var req struct {
			Title       string `json:"title"`
			Description string `json:"description"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		var newID int
		err := db.QueryRow(
			`INSERT INTO courses (title, description, teacher_id)
             VALUES ($1,$2,$3) RETURNING id`,
			req.Title, req.Description, teacherID,
		).Scan(&newID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]int{"id": newID})

	// PUT /api/teacher/courses — обновить свой курс
	case http.MethodPut:
		var req CourseInfo
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем, что этот курс действительно принадлежит учителю
		var owner int
		err := db.QueryRow(
			"SELECT teacher_id FROM courses WHERE id = $1",
			req.ID,
		).Scan(&owner)
		if err != nil || owner != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		_, err = db.Exec(
			`UPDATE courses
             SET title=$1, description=$2
             WHERE id=$3`,
			req.Title, req.Description, req.ID,
		)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// DELETE /api/teacher/courses — удалить свой курс
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем, что курс принадлежит учителю
		var ownerID int
		err := db.QueryRow(
			"SELECT teacher_id FROM courses WHERE id = $1",
			req.ID,
		).Scan(&ownerID)
		if err != nil || ownerID != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		_, err = db.Exec("DELETE FROM courses WHERE id = $1", req.ID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}

// teacherTestsHandler — CRUD для тестов текущего учителя
func teacherTestsHandler(w http.ResponseWriter, r *http.Request) {
	// 1) Получаем claims из контекста
	claims := getClaims(r.Context())
	if claims == nil {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}
	// 2) Определяем ID учителя по email
	var teacherID int
	if err := db.QueryRow(
		"SELECT id FROM users WHERE email = $1",
		claims.Email,
	).Scan(&teacherID); err != nil {
		http.Error(w, "User not found", http.StatusInternalServerError)
		return
	}

	switch r.Method {
	// GET /api/teacher/tests — список тестов
	case http.MethodGet:
		rows, err := db.Query(`
			SELECT t.id, t.title, t.description, t.course_id, t.created_at
			FROM tests t
			JOIN courses c ON c.id = t.course_id
			WHERE c.teacher_id = $1
			ORDER BY t.created_at DESC
		`, teacherID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var list []TestInfo
		for rows.Next() {
			var t TestInfo
			if err := rows.Scan(
				&t.ID, &t.Title, &t.Description, &t.CourseID, &t.CreatedAt,
			); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
			list = append(list, t)
		}
		if rows.Err() != nil {
			http.Error(w, rows.Err().Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(list)

	// POST /api/teacher/tests — создать новый тест
	case http.MethodPost:
		var req struct {
			Title       string `json:"title"`
			Description string `json:"description"`
			CourseID    int    `json:"course_id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем, что курс принадлежит учителю
		var owner int
		if err := db.QueryRow(
			"SELECT teacher_id FROM courses WHERE id = $1",
			req.CourseID,
		).Scan(&owner); err != nil || owner != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		var newID int
		err := db.QueryRow(
			`INSERT INTO tests (title, description, course_id)
			 VALUES ($1,$2,$3) RETURNING id`,
			req.Title, req.Description, req.CourseID,
		).Scan(&newID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]int{"id": newID})

	// PUT /api/teacher/tests — обновить тест
	case http.MethodPut:
		var req TestInfo
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем владение
		var ownerID int
		if err := db.QueryRow(
			`SELECT c.teacher_id
			 FROM tests t
			 JOIN courses c ON c.id = t.course_id
			 WHERE t.id = $1`,
			req.ID,
		).Scan(&ownerID); err != nil || ownerID != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		res, err := db.Exec(
			`UPDATE tests
			 SET title=$1, description=$2
			 WHERE id=$3`,
			req.Title, req.Description, req.ID,
		)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "Test not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// DELETE /api/teacher/tests — удалить тест
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем владение
		var ownerID2 int
		if err := db.QueryRow(
			`SELECT c.teacher_id
			 FROM tests t
			 JOIN courses c ON c.id = t.course_id
			 WHERE t.id = $1`,
			req.ID,
		).Scan(&ownerID2); err != nil || ownerID2 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		res2, err := db.Exec("DELETE FROM tests WHERE id = $1", req.ID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res2.RowsAffected(); cnt == 0 {
			http.Error(w, "Test not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}

// teacherQuestionsHandler — CRUD вопросов для тестов текущего учителя
func teacherQuestionsHandler(w http.ResponseWriter, r *http.Request) {
	// 1) Проверка авторизации и получение teacherID из токена
	claims := getClaims(r.Context())
	if claims == nil {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}
	var teacherID int
	if err := db.QueryRow(
		"SELECT id FROM users WHERE email = $1",
		claims.Email,
	).Scan(&teacherID); err != nil {
		http.Error(w, "User not found", http.StatusInternalServerError)
		return
	}

	switch r.Method {
	// GET /api/teacher/questions?test_id={id}
	case http.MethodGet:
		// 2) Получаем test_id из query
		testIDStr := r.URL.Query().Get("test_id")
		testID, err := strconv.Atoi(testIDStr)
		if err != nil {
			http.Error(w, "Invalid test_id", http.StatusBadRequest)
			return
		}
		// 3) Проверяем, что тест принадлежит учителю
		var owner int
		err = db.QueryRow(
			"SELECT c.teacher_id FROM tests t JOIN courses c ON c.id = t.course_id WHERE t.id = $1",
			testID,
		).Scan(&owner)
		if err != nil || owner != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		// 4) Запрашиваем вопросы вместе с correct_answer_text
		rows, err := db.Query(`
            SELECT id, test_id, question_text, question_type, multiple_choice, correct_answer_text, created_at
            FROM questions
            WHERE test_id = $1
            ORDER BY created_at
        `, testID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var out []QuestionInfoOut
		for rows.Next() {
			var q QuestionInfo
			if err := rows.Scan(
				&q.ID,
				&q.TestID,
				&q.QuestionText,
				&q.QuestionType,
				&q.MultipleChoice,
				&q.CorrectAnswerText,
				&q.CreatedAt,
			); err != nil {
				log.Println("Scan question error:", err)
				continue
			}
			// разворачиваем NullString в чистую строку
			out = append(out, QuestionInfoOut{
				QuestionInfo:      q,
				CorrectAnswerText: q.CorrectAnswerText.String,
			})
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(out)

	// POST /api/teacher/questions
	case http.MethodPost:
		var req teacherQuestionRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// подтверждаем, что тест принадлежит учителю
		var owner2 int
		err := db.QueryRow(
			"SELECT c.teacher_id FROM tests t JOIN courses c ON c.id = t.course_id WHERE t.id = $1",
			req.TestID,
		).Scan(&owner2)
		if err != nil || owner2 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		// вставляем вместе с correct_answer_text
		var newID int
		err = db.QueryRow(
			`INSERT INTO questions
             (test_id, question_text, question_type, multiple_choice, correct_answer_text)
             VALUES ($1,$2,$3,$4,$5) RETURNING id`,
			req.TestID, req.QuestionText, req.QuestionType, req.MultipleChoice, req.CorrectAnswerText,
		).Scan(&newID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]int{"id": newID})

	// PUT /api/teacher/questions
	case http.MethodPut:
		var req teacherQuestionRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем право на обновление
		var owner3 int
		err := db.QueryRow(`
            SELECT c.teacher_id
            FROM questions q
            JOIN tests t ON t.id = q.test_id
            JOIN courses c ON c.id = t.course_id
            WHERE q.id = $1
        `, req.ID).Scan(&owner3)
		if err != nil || owner3 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		// обновляем ещё и correct_answer_text
		res, err := db.Exec(
			`UPDATE questions
             SET question_text = $1,
                 question_type = $2,
                 multiple_choice = $3,
                 correct_answer_text = $4
             WHERE id = $5`,
			req.QuestionText, req.QuestionType, req.MultipleChoice, req.CorrectAnswerText, req.ID,
		)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if cnt, _ := res.RowsAffected(); cnt == 0 {
			http.Error(w, "Question not found", http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// DELETE /api/teacher/questions
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем права на удаление
		var owner4 int
		err := db.QueryRow(`
            SELECT c.teacher_id
            FROM questions q
            JOIN tests t ON t.id = q.test_id
            JOIN courses c ON c.id = t.course_id
            WHERE q.id = $1
        `, req.ID).Scan(&owner4)
		if err != nil || owner4 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		_, err = db.Exec("DELETE FROM questions WHERE id = $1", req.ID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	default:
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
	}
}

func teacherOptionsHandler(w http.ResponseWriter, r *http.Request) {
	claims := getClaims(r.Context())
	if claims == nil {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}
	// находим teacherID
	var teacherID int
	if err := db.QueryRow("SELECT id FROM users WHERE email=$1", claims.Email).
		Scan(&teacherID); err != nil {
		http.Error(w, "User not found", http.StatusInternalServerError)
		return
	}

	switch r.Method {
	// GET /api/teacher/options?question_id=...
	case http.MethodGet:
		qidStr := r.URL.Query().Get("question_id")
		qid, err := strconv.Atoi(qidStr)
		if err != nil {
			http.Error(w, "Invalid question_id", http.StatusBadRequest)
			return
		}
		// проверяем владение вопросом через JOIN
		var owner int
		err = db.QueryRow(`
            SELECT c.teacher_id
            FROM questions q
            JOIN tests t ON t.id=q.test_id
            JOIN courses c ON c.id=t.course_id
            WHERE q.id=$1
        `, qid).Scan(&owner)
		if err != nil || owner != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		rows, err := db.Query(`
            SELECT id, question_id, option_text, is_correct, created_at
            FROM options WHERE question_id=$1 ORDER BY id
        `, qid)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()
		var opts []OptionInfo
		for rows.Next() {
			var o OptionInfo
			rows.Scan(&o.ID, &o.QuestionID, &o.OptionText, &o.IsCorrect, &o.CreatedAt)
			opts = append(opts, o)
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(opts)

	// POST /api/teacher/options
	case http.MethodPost:
		var req struct {
			QuestionID int    `json:"question_id"`
			OptionText string `json:"option_text"`
			IsCorrect  bool   `json:"is_correct"`
		}
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем владение вопросом (тот же JOIN)
		var owner2 int
		err := db.QueryRow(`
            SELECT c.teacher_id
            FROM questions q
            JOIN tests t ON t.id=q.test_id
            JOIN courses c ON c.id=t.course_id
            WHERE q.id=$1
        `, req.QuestionID).Scan(&owner2)
		if err != nil || owner2 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		var newID int
		err = db.QueryRow(
			`INSERT INTO options (question_id, option_text, is_correct)
             VALUES ($1,$2,$3) RETURNING id`,
			req.QuestionID, req.OptionText, req.IsCorrect,
		).Scan(&newID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]int{"id": newID})

	// PUT /api/teacher/options
	case http.MethodPut:
		var req OptionInfo
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		// проверяем владение через JOIN точно так же
		var owner3 int
		err := db.QueryRow(`
            SELECT c.teacher_id
            FROM options o
            JOIN questions q ON q.id=o.question_id
            JOIN tests t ON t.id=q.test_id
            JOIN courses c ON c.id=t.course_id
            WHERE o.id=$1
        `, req.ID).Scan(&owner3)
		if err != nil || owner3 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		_, err = db.Exec(
			`UPDATE options
             SET option_text=$1, is_correct=$2
             WHERE id=$3`,
			req.OptionText, req.IsCorrect, req.ID,
		)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	// DELETE /api/teacher/options
	case http.MethodDelete:
		var req struct {
			ID int `json:"id"`
		}
		json.NewDecoder(r.Body).Decode(&req)
		// проверяем владение (аналогично)
		var owner4 int
		err := db.QueryRow(`
            SELECT c.teacher_id
            FROM options o
            JOIN questions q ON q.id=o.question_id
            JOIN tests t ON t.id=q.test_id
            JOIN courses c ON c.id=t.course_id
            WHERE o.id=$1
        `, req.ID).Scan(&owner4)
		if err != nil || owner4 != teacherID {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		_, err = db.Exec("DELETE FROM options WHERE id=$1", req.ID)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.WriteHeader(http.StatusNoContent)

	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

func GetCourses(w http.ResponseWriter, r *http.Request) {
	// Получаем список курсов
	rows, err := db.Query("SELECT id, title, description FROM courses")
	if err != nil {
		log.Println("GetCourses query error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	// Слайс результата
	var courses []map[string]interface{}

	for rows.Next() {
		var id int
		var title, description string
		if err := rows.Scan(&id, &title, &description); err != nil {
			log.Println("GetCourses scan error:", err)
			continue
		}

		// Подсчёт числа тестов, связанных с этим курсом
		var testCount int
		if err := db.QueryRow(
			"SELECT COUNT(*) FROM tests WHERE course_id = $1",
			id,
		).Scan(&testCount); err != nil {
			log.Println("GetCourses testCount error:", err)
			testCount = 0
		}

		// Формируем JSON-объект курса
		course := map[string]interface{}{
			"id":          id,
			"title":       title,
			"description": description,
			"test_count":  testCount,
		}
		courses = append(courses, course)
	}

	// Возвращаем JSON
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(courses); err != nil {
		log.Println("GetCourses encode error:", err)
	}
}

// тестовый код
func GetCourseByID(w http.ResponseWriter, r *http.Request) {
	// log.Println("===> GetCourseByID called")

	// ожидаем URL вида /api/courses/{id}
	idStr := strings.TrimPrefix(r.URL.Path, "/api/courses/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		log.Println("Invalid course ID:", idStr, err)
		http.Error(w, "Invalid course ID", http.StatusBadRequest)
		return
	}
	// log.Println("Parsed course ID:", id)

	// 1. Основная информация о курсе
	var course struct {
		ID          int    `json:"id"`
		Title       string `json:"title"`
		Description string `json:"description"`
	}
	err = db.QueryRow("SELECT id, title, description FROM courses WHERE id = $1", id).
		Scan(&course.ID, &course.Title, &course.Description)
	if err != nil {
		log.Println("Course not found or DB error:", err)
		http.Error(w, "Course not found", http.StatusNotFound)
		return
	}

	// 2. Теория
	rowsT, err := db.Query("SELECT id, title, summary, content FROM theory WHERE course_id = $1", id)
	if err != nil {
		log.Println("Error loading theory:", err)
		http.Error(w, "Error loading theory", http.StatusInternalServerError)
		return
	}
	defer rowsT.Close()

	var theory []map[string]interface{}
	for rowsT.Next() {
		var tID int
		var tTitle, tSum, tContent string
		err = rowsT.Scan(&tID, &tTitle, &tSum, &tContent)
		if err != nil {
			http.Error(w, "Error reading theory row", http.StatusInternalServerError)
			return
		}
		theory = append(theory, map[string]interface{}{
			"id":      tID,
			"title":   tTitle,
			"summary": tSum,
			"content": tContent, // можно опустить, если не нужен на этом этапе
		})

	}

	// 3. Тесты
	rowsQ, err := db.Query(`
        SELECT t.id, t.title, COUNT(q.*)
        FROM tests t
        LEFT JOIN questions q ON q.test_id = t.id
        WHERE t.course_id = $1
        GROUP BY t.id, t.title`, id)
	if err != nil {
		log.Println("Error loading tests:", err)
		http.Error(w, "Error loading tests", http.StatusInternalServerError)
		return
	}
	defer rowsQ.Close()

	var tests []map[string]interface{}
	for rowsQ.Next() {
		var testID, qCount int
		var testTitle string
		if err := rowsQ.Scan(&testID, &testTitle, &qCount); err != nil {
			log.Println("Error scanning test row:", err)
			continue
		}
		tests = append(tests, map[string]interface{}{
			"id":             testID,
			"title":          testTitle,
			"question_count": qCount,
		})
	}

	// Собираем всё в JSON
	resp := map[string]interface{}{
		"id":          course.ID,
		"title":       course.Title,
		"description": course.Description,
		"theory":      theory,
		"tests":       tests,
	}
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		log.Println("JSON encoding error:", err)
		http.Error(w, "Failed to encode JSON", http.StatusInternalServerError)
	}
}

// Новый вариант — правильный, для таблицы theory:
func GetTheory(w http.ResponseWriter, r *http.Request) {
	// разбор пути
	p := strings.TrimPrefix(r.URL.Path, "/api/courses/")
	parts := strings.Split(p, "/") // ["4","theory"]
	if len(parts) != 2 || parts[1] != "theory" {
		http.NotFound(w, r)
		return
	}
	courseID := parts[0]

	type Item struct {
		ID      int    `json:"id"`
		Title   string `json:"title"`
		Summary string `json:"summary"`
		Content string `json:"content"`
	}

	rows, err := db.Query(`
        SELECT id, title, summary, content
        FROM theory
        WHERE course_id = $1
        ORDER BY id
    `, courseID)
	if err != nil {
		log.Println("GetTheory query error:", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var items []Item
	for rows.Next() {
		var it Item
		if err := rows.Scan(&it.ID, &it.Title, &it.Summary, &it.Content); err != nil {
			log.Println("GetTheory scan error:", err)
			continue
		}
		items = append(items, it)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(items)
}

// GET /api/courses/{courseID}/tests
func GetTests(w http.ResponseWriter, r *http.Request) {
	parts := strings.Split(strings.Trim(r.URL.Path, "/"), "/")
	if len(parts) != 4 {
		http.Error(w, "invalid path", http.StatusBadRequest)
		return
	}
	courseID := parts[2]

	rows, err := db.Query(`
        SELECT t.id, t.title,
            (SELECT COUNT(*) FROM questions q WHERE q.test_id = t.id) as question_count
        FROM tests t
        WHERE t.course_id = $1
        ORDER BY t.id
    `, courseID)
	if err != nil {
		http.Error(w, "db error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	type Test struct {
		ID            int    `json:"id"`
		Title         string `json:"title"`
		QuestionCount int    `json:"question_count"`
	}

	var tests []Test
	for rows.Next() {
		var t Test
		if err := rows.Scan(&t.ID, &t.Title, &t.QuestionCount); err != nil {
			continue
		}
		tests = append(tests, t)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(tests)
}

// GET /api/theory/{id}
func GetTheoryItem(w http.ResponseWriter, r *http.Request) {
	// ожидаем путь вида /api/theory/123
	idStr := strings.TrimPrefix(r.URL.Path, "/api/theory/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid ID", http.StatusBadRequest)
		return
	}

	var item struct {
		ID      int    `json:"id"`
		Title   string `json:"title"`
		Content string `json:"content"`
	}
	err = db.QueryRow(
		"SELECT id, title, content FROM theory WHERE id = $1",
		id,
	).Scan(&item.ID, &item.Title, &item.Content)
	if err != nil {
		http.Error(w, "Not found", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(item)
}

// GET /api/tests/{testID}/questions
// GET /api/tests/{testID}/questions
func GetTestQuestions(w http.ResponseWriter, r *http.Request) {
	// 1) Парсим testID из URL "/api/tests/123/questions"
	parts := strings.Split(strings.TrimPrefix(r.URL.Path, "/api/tests/"), "/")
	if len(parts) != 2 || parts[1] != "questions" {
		http.NotFound(w, r)
		return
	}
	testID, err := strconv.Atoi(parts[0])
	if err != nil {
		http.Error(w, "Invalid testID", http.StatusBadRequest)
		return
	}

	// 2) Запрашиваем все вопросы этого теста
	rows, err := db.Query(`SELECT id, test_id, question_text, question_type, multiple_choice, correct_answer_text, created_at
		FROM questions
		WHERE test_id = $1
		ORDER BY id`, testID)
	if err != nil {
		http.Error(w, "DB error: "+err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var questions []QuestionInfo
	for rows.Next() {
		var q QuestionInfo
		if err := rows.Scan(
			&q.ID,
			&q.TestID,
			&q.QuestionText,
			&q.QuestionType,
			&q.MultipleChoice,
			&q.CorrectAnswerText,
			&q.CreatedAt,
		); err != nil {
			log.Println("Scan question error:", err)
			continue
		}

		// 3) Для закрытых вопросов подгружаем опции
		if q.QuestionType == "closed" {
			optRows, err := db.Query(`SELECT id, question_id, option_text, is_correct, created_at
				FROM options
				WHERE question_id = $1
				ORDER BY id`, q.ID)
			if err != nil {
				log.Println("Options query error:", err)
			} else {
				for optRows.Next() {
					var o OptionInfo
					if err := optRows.Scan(
						&o.ID,
						&o.QuestionID,
						&o.OptionText,
						&o.IsCorrect,
						&o.CreatedAt,
					); err != nil {
						log.Println("Scan option error:", err)
						continue
					}
					q.Options = append(q.Options, o)
				}
				optRows.Close()
			}
		}

		questions = append(questions, q)
	}

	// 4) Формируем выходную структуру
	var result []QuestionInfoOut
	for _, q := range questions {
		result = append(result, QuestionInfoOut{
			QuestionInfo:      q,
			CorrectAnswerText: q.CorrectAnswerText.String,
		})
	}

	// 5) Отдаём JSON
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(result); err != nil {
		log.Println("Encode questions error:", err)
	}
}

func GetTheoryWithTests(w http.ResponseWriter, r *http.Request) {
	idStr := strings.TrimPrefix(r.URL.Path, "/api/theory/")
	idStr = strings.TrimSuffix(idStr, "/with-tests")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid theory ID", http.StatusBadRequest)
		return
	}

	// Загружаем саму теорию
	var theory TheoryWithTests
	err = db.QueryRow(`SELECT id, title, summary, content, course_id, created_at FROM theory WHERE id = $1`, id).
		Scan(&theory.ID, &theory.Title, &theory.Summary, &theory.Content, &theory.CourseID, &theory.CreatedAt)
	if err != nil {
		http.Error(w, "Theory not found", http.StatusNotFound)
		return
	}

	// Загружаем тесты по course_id
	testsRows, err := db.Query(`SELECT id, title, description, created_at FROM tests WHERE course_id = $1`, theory.CourseID)
	if err != nil {
		http.Error(w, "Tests query failed", http.StatusInternalServerError)
		return
	}
	defer testsRows.Close()

	for testsRows.Next() {
		var test Test
		if err := testsRows.Scan(&test.ID, &test.Title, &test.Description, &test.CreatedAt); err != nil {
			continue
		}

		// Загружаем вопросы для теста
		qRows, err := db.Query(`SELECT id, question_text, question_type, multiple_choice, created_at FROM questions WHERE test_id = $1`, test.ID)
		if err != nil {
			continue
		}

		for qRows.Next() {
			var question Question
			if err := qRows.Scan(&question.ID, &question.Text, &question.Type, &question.MultipleChoice, &question.CreatedAt); err != nil {
				continue
			}

			// Загружаем варианты для вопроса
			oRows, err := db.Query(`SELECT id, option_text, is_correct, created_at FROM options WHERE question_id = $1`, question.ID)
			if err != nil {
				continue
			}
			for oRows.Next() {
				var option Option
				if err := oRows.Scan(&option.ID, &option.Text, &option.IsCorrect, &option.CreatedAt); err != nil {
					continue
				}
				question.Options = append(question.Options, option)
			}
			oRows.Close()

			test.Questions = append(test.Questions, question)
		}
		qRows.Close()

		theory.Tests = append(theory.Tests, test)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(theory)
}

// POST /api/teacher/questions/set_open_answer
// POST /api/teacher/questions/set_open_answer
func teacherSetOpenAnswerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}
	// Авторизация
	claims := getClaims(r.Context())
	if claims == nil {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}
	var teacherID int
	if err := db.QueryRow(
		"SELECT id FROM users WHERE email=$1",
		claims.Email,
	).Scan(&teacherID); err != nil {
		http.Error(w, "User not found", http.StatusInternalServerError)
		return
	}

	// Парсим JSON тело
	var data struct {
		ID     int    `json:"id"`
		Answer string `json:"answer"`
	}
	if err := json.NewDecoder(r.Body).Decode(&data); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}
	qid := data.ID
	answer := data.Answer

	// Проверяем владельца вопроса
	var owner int
	err := db.QueryRow(`
        SELECT c.teacher_id
        FROM questions q
        JOIN tests t ON t.id = q.test_id
        JOIN courses c ON c.id = t.course_id
        WHERE q.id = $1
    `, qid).Scan(&owner)
	if err != nil {
		http.Error(w, "Question not found", http.StatusNotFound)
		return
	}
	if owner != teacherID {
		http.Error(w, "Forbidden", http.StatusForbidden)
		return
	}

	// Обновляем ответ
	if _, err := db.Exec(
		`UPDATE questions
           SET correct_answer_text = $1
         WHERE id = $2`,
		answer, qid,
	); err != nil {
		http.Error(w, "DB error: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// Возвращаем 200 OK (или 204 No Content)
	w.WriteHeader(http.StatusOK)
}

Файл: C:\dev\projects\html\Курсовая работа\main.go
package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	jwt "github.com/dgrijalva/jwt-go"
	_ "github.com/lib/pq"
	"golang.org/x/crypto/bcrypt"
)

// DB connection data
const (
	host     = "localhost"
	port     = 5432
	user     = "garun"
	password = "origami"
	dbname   = "KursachDB"
)

const (
	// всегда хранится в static/uploads/default.png
	defaultAvatar = "/static/uploads/default.png"
)

// User model
type User struct {
	ID           int       `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"-"`
	Role         string    `json:"role"`
	FullName     string    `json:"full_name"`
	IsActive     bool      `json:"is_active"`
	CreatedAt    time.Time `json:"created_at"`
	LastLogin    time.Time `json:"last_login"`
	AvatarPath   string    `json:"avatar_path"`
}

var (
	db              *sql.DB
	jwtKey          = []byte("my_secret_key")
	welcomePagePath = "./static/welcomeMainPage"
	mainPagePath    = "./static/mainPage"
	profilePath     = "./static/profile"
)

// Claims для JWT
type Claims struct {
	Email string `json:"email"`
	Role  string `json:"role"`
	jwt.StandardClaims
}

type Option struct {
	ID        int       `json:"id"`
	Text      string    `json:"text"`
	IsCorrect bool      `json:"is_correct"`
	CreatedAt time.Time `json:"created_at"`
}

type Question struct {
	ID             int       `json:"id"`
	Text           string    `json:"text"`
	Type           string    `json:"type"`
	MultipleChoice bool      `json:"multiple_choice"`
	CreatedAt      time.Time `json:"created_at"`
	Options        []Option  `json:"options"`
}

type Test struct {
	ID          int        `json:"id"`
	Title       string     `json:"title"`
	Description string     `json:"description"`
	CreatedAt   time.Time  `json:"created_at"`
	Questions   []Question `json:"questions"`
}

type TheoryWithTests struct {
	ID        int       `json:"id"`
	Title     string    `json:"title"`
	Summary   string    `json:"summary"`
	Content   string    `json:"content"`
	CourseID  int       `json:"course_id"`
	CreatedAt time.Time `json:"created_at"`
	Tests     []Test    `json:"tests"`
}

func main() {
	// Подключаемся к БД
	psqlInfo := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname,
	)
	var err error
	db, err = sql.Open("postgres", psqlInfo)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	if err = db.Ping(); err != nil {
		log.Fatal(err)
	}

	// Создаём начального администратора, если нет
	createAdminUser()

	// MIME-типы для статики
	mime.AddExtensionType(".css", "text/css")
	mime.AddExtensionType(".js", "application/javascript")
	mime.AddExtensionType(".svg", "image/svg+xml")

	// Основной мультиплексор
	mux := http.NewServeMux()

	// Статические файлы
	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./static"))))

	// Публичные маршруты
	mux.HandleFunc("/", rootHandler)
	mux.HandleFunc("/register", registerHandler)
	mux.HandleFunc("/login", loginHandler)
	mux.HandleFunc("/profile", profilePageHandler)
	mux.HandleFunc("/logout", logoutHandler)

	// API‑mux (только для аутентифицированных)
	apiMux := http.NewServeMux()
	// Доступно всем ролям
	apiMux.HandleFunc("/api/profile", profileAPIHandler)
	apiMux.HandleFunc("/api/upload-avatar", uploadAvatarHandler)
	apiMux.HandleFunc("/api/remove-avatar", removeAvatarHandler)
	// Только для admin
	apiMux.Handle(
		"/api/admin/users",
		RequireRole("admin", http.HandlerFunc(adminUsersHandler)),
	)
	apiMux.Handle(
		"/api/admin/courses",
		RequireRole("admin", http.HandlerFunc(adminCoursesHandler)),
	)
	// Для teacher и admin
	apiMux.Handle(
		"/api/teacher/courses",
		RequireAnyRole([]string{"admin", "teacher"}, http.HandlerFunc(teacherCoursesHandler)),
	)
	apiMux.Handle(
		"/api/teacher/tests",
		RequireAnyRole([]string{"admin", "teacher"}, http.HandlerFunc(teacherTestsHandler)),
	)

	apiMux.Handle(
		"/api/teacher/questions",
		RequireAnyRole([]string{"admin", "teacher"}, http.HandlerFunc(teacherQuestionsHandler)),
	)

	apiMux.Handle(
		"/api/teacher/options",
		RequireAnyRole([]string{"admin", "teacher"}, http.HandlerFunc(teacherOptionsHandler)),
	)

	apiMux.Handle(
		"/api/courses",
		RequireAnyRole([]string{"admin", "teacher", "student"}, http.HandlerFunc(GetCourses)),
	)

	// apiMux.Handle("/api/courses/", RequireAnyRole(
	// 	[]string{"admin", "teacher", "student"}, http.HandlerFunc(GetCourseByID),
	// ))

	apiMux.Handle("/api/courses/", RequireAnyRole(
		[]string{"admin", "teacher", "student"},
		http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// /api/courses/{id}
			// /api/courses/{id}/theory
			// /api/courses/{id}/tests

			// отрезаем префикс
			p := strings.TrimPrefix(r.URL.Path, "/api/courses/")
			parts := strings.Split(p, "/")

			switch {
			// GET /api/courses/{id}/theory
			case len(parts) == 2 && parts[1] == "theory":
				GetTheory(w, r)

			// GET /api/courses/{id}/tests
			case len(parts) == 2 && parts[1] == "tests":
				GetTests(w, r)

			// GET /api/courses/{id}
			case len(parts) == 1 && parts[0] != "":
				GetCourseByID(w, r)

			default:
				http.NotFound(w, r)
			}
		}),
	))

	// Получение вопросов теста — паттерн /api/tests/{testID}/questions
	apiMux.Handle(
		"/api/tests/",
		RequireAnyRole([]string{"admin", "teacher", "student"}, http.HandlerFunc(GetTestQuestions)),
	)
	apiMux.Handle(
		"/api/teacher/questions/set_open_answer",
		RequireAnyRole([]string{"admin", "teacher", "student"}, http.HandlerFunc(teacherSetOpenAnswerHandler)),
	)

	apiMux.Handle("/api/theory/", RequireAnyRole(
		[]string{"admin", "teacher", "student"},
		http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			path := strings.TrimPrefix(r.URL.Path, "/api/theory/")
			if strings.HasSuffix(path, "/with-tests") {
				GetTheoryWithTests(w, r)
			} else {
				GetTheoryItem(w, r)
			}
		}),
	))

	// Оборачиваем API в JWT‑middleware
	mux.Handle("/api/", JWTAuthMiddleware(apiMux))

	// Старт сервера
	fmt.Println("Server started on :8080")
	log.Fatal(http.ListenAndServe(":8080", CORSMiddleware(mux)))

}

// uploadAvatarHandler — принимает multipart/form-data с полем "avatar"
func uploadAvatarHandler(w http.ResponseWriter, r *http.Request) {
	// 1. Проверяем метод
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// 2. Аутентификация по JWT
	tokenCookie, err := r.Cookie("token")
	if err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	claims := &Claims{}
	if _, err := jwt.ParseWithClaims(tokenCookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	}); err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	// 3. Парсим форму (макс 10 MiB)
	if err := r.ParseMultipartForm(10 << 20); err != nil {
		http.Error(w, "File too big", http.StatusBadRequest)
		return
	}
	file, hdr, err := r.FormFile("avatar")
	if err != nil {
		http.Error(w, "No file uploaded", http.StatusBadRequest)
		return
	}
	defer file.Close()

	// 4. Считываем старый путь аватарки из БД
	var oldPath sql.NullString
	_ = db.QueryRow("SELECT avatar_path FROM users WHERE email = $1", claims.Email).
		Scan(&oldPath)

	// 5. Генерируем новое имя и сохраняем файл
	ext := filepath.Ext(hdr.Filename)
	filename := fmt.Sprintf("%d%s", time.Now().UnixNano(), ext)
	saveDir := "./static/uploads"
	if err := os.MkdirAll(saveDir, 0755); err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}
	outPath := filepath.Join(saveDir, filename)
	outFile, err := os.Create(outPath)
	if err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}
	defer outFile.Close()
	if _, err := io.Copy(outFile, file); err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}

	// 6. Обновляем путь в БД
	newDBPath := "/static/uploads/" + filename
	if _, err := db.Exec(
		"UPDATE users SET avatar_path = $1 WHERE email = $2",
		newDBPath, claims.Email,
	); err != nil {
		log.Println("Failed to update avatar_path:", err)
	}

	// 7. Удаляем старый файл, только если он не дефолтный
	if oldPath.Valid && oldPath.String != defaultAvatar {
		if err := os.Remove("." + oldPath.String); err != nil {
			log.Println("Failed to remove old avatar:", err)
		}
	}

	// 8. Возвращаем клиенту JSON с новым URL
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"url": newDBPath})
}

func removeAvatarHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	// авторизация
	tokenCookie, err := r.Cookie("token")
	if err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	claims := &Claims{}
	if _, err := jwt.ParseWithClaims(tokenCookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	}); err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	// читаем старый путь
	var oldPath sql.NullString
	_ = db.QueryRow("SELECT avatar_path FROM users WHERE email=$1", claims.Email).Scan(&oldPath)

	// обновляем БД на дефолт
	_, _ = db.Exec("UPDATE users SET avatar_path=$1 WHERE email=$2", defaultAvatar, claims.Email)

	// если старый был не дефолтным — удаляем файл
	if oldPath.Valid && oldPath.String != defaultAvatar {
		os.Remove("." + oldPath.String)
	}

	// отдаем JSON с дефолтным URL
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"url": defaultAvatar})
}

// rootHandler: выдаёт welcomeMainPage или mainPage в зависимости от валидности JWT
func rootHandler(w http.ResponseWriter, r *http.Request) {
	// 0) Отключаем кэширование HTML-ответа
	w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
	w.Header().Set("Pragma", "no-cache")
	w.Header().Set("Expires", "0")

	// 1) Проверяем наличие JWT-куки
	tokenCookie, err := r.Cookie("token")
	if err != nil {
		// нет токена — отдаём welcome-страницу со всеми её статикой
		http.FileServer(http.Dir(welcomePagePath)).ServeHTTP(w, r)
		return
	}

	// 2) Парсим и проверяем токен
	claims := &Claims{}
	tkn, err := jwt.ParseWithClaims(tokenCookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
		// проверяем алгоритм подписи
		if _, ok := t.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", t.Header["alg"])
		}
		return jwtKey, nil
	})
	if err != nil {
		log.Printf("JWT parse error: %v", err)
		http.FileServer(http.Dir(welcomePagePath)).ServeHTTP(w, r)
		return
	}
	if !tkn.Valid || claims.ExpiresAt < time.Now().Unix() {
		log.Printf("Invalid or expired token for %s", claims.Email)
		http.FileServer(http.Dir(welcomePagePath)).ServeHTTP(w, r)
		return
	}

	// 3) Токен валиден — обновляем last_login
	if _, err := db.Exec(
		"UPDATE users SET last_login = $1 WHERE email = $2",
		time.Now(), claims.Email,
	); err != nil {
		log.Println("Failed to update last_login:", err)
	}

	// 4) Отдаём основную страницу со всеми статикой
	http.FileServer(http.Dir(mainPagePath)).ServeHTTP(w, r)
}

// registerHandler: регистрация нового пользователя
func registerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var newUser struct {
		Name     string `json:"name"`
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	if err := json.NewDecoder(r.Body).Decode(&newUser); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	hashedPass, err := bcrypt.GenerateFromPassword([]byte(newUser.Password), bcrypt.DefaultCost)
	if err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}

	var exists bool
	err = db.QueryRow(
		"SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)",
		newUser.Email,
	).Scan(&exists)
	if err != nil || exists {
		http.Error(w, "User already exists", http.StatusBadRequest)
		return
	}

	_, err = db.Exec(
		`INSERT INTO users(email, password_hash, role, full_name, is_active, created_at)
		 VALUES($1,$2,$3,$4,$5,$6)`,
		newUser.Email, string(hashedPass), "student", newUser.Name, "light", true, time.Now(),
	)
	if err != nil {
		http.Error(w, "Error creating user", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
	w.Write([]byte("Registration successful"))
}

// loginHandler: аутентификация и установка JWT-куки
func loginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var creds struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	if err := json.NewDecoder(r.Body).Decode(&creds); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	var user User
	err := db.QueryRow(
		"SELECT email, password_hash, role FROM users WHERE email = $1",
		creds.Email,
	).Scan(&user.Email, &user.PasswordHash, &user.Role)
	if err != nil {
		http.Error(w, "Invalid email or password", http.StatusUnauthorized)
		return
	}

	if err := bcrypt.CompareHashAndPassword(
		[]byte(user.PasswordHash), []byte(creds.Password),
	); err != nil {
		http.Error(w, "Invalid email or password", http.StatusUnauthorized)
		return
	}

	// Генерация токена
	expiration := time.Now().Add(48 * time.Hour) // токен обновляется каждые 48 часов
	claims := &Claims{
		Email:          user.Email,
		Role:           user.Role,
		StandardClaims: jwt.StandardClaims{ExpiresAt: expiration.Unix()},
	}
	tok := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokStr, err := tok.SignedString(jwtKey)
	if err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}

	// Устанавливаем куку
	http.SetCookie(w, &http.Cookie{
		Name:     "token",
		Value:    tokStr,
		Path:     "/",
		Expires:  expiration,
		MaxAge:   int(time.Until(expiration).Seconds()),
		HttpOnly: true,
		SameSite: http.SameSiteLaxMode,
		// Secure:   true, // включите для HTTPS
	})

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"role": user.Role})
}

// profileAPIHandler — возвращает JSON профиля, с вычислением is_active по last_login
func profileAPIHandler(w http.ResponseWriter, r *http.Request) {
	// Авторизация через JWT-куку
	tokenCookie, err := r.Cookie("token")
	if err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	claims := &Claims{}
	if _, err := jwt.ParseWithClaims(tokenCookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	}); err != nil {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	// Доставать поля, вычисляя is_active: true, если last_login < 5 минут назад
	var u struct {
		ID         int       `json:"id"`
		Email      string    `json:"email"`
		FullName   string    `json:"full_name"`
		IsActive   bool      `json:"is_active"`
		CreatedAt  time.Time `json:"created_at"`
		LastLogin  time.Time `json:"last_login"`
		AvatarPath string    `json:"avatar_path"`
		Role       string    `json:"role"`
	}
	err = db.QueryRow(`
		SELECT
			id,
			email,
			full_name,
			CASE
				WHEN NOW() - last_login < INTERVAL '5 minutes' THEN TRUE
				ELSE FALSE
			END AS is_active,
			created_at,
			last_login,
			avatar_path,
			role
		FROM users
		WHERE email = $1
	`, claims.Email).Scan(
		&u.ID,
		&u.Email,
		&u.FullName,
		&u.IsActive,
		&u.CreatedAt,
		&u.LastLogin,
		&u.AvatarPath,
		&u.Role,
	)
	if err != nil {
		http.Error(w, "Server error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(u)
}

func profilePageHandler(w http.ResponseWriter, r *http.Request) {
	// 1) Проверяем JWT-куку
	tokenCookie, err := r.Cookie("token")
	if err != nil {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	claims := &Claims{}
	tkn, err := jwt.ParseWithClaims(tokenCookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})
	if err != nil || !tkn.Valid || claims.ExpiresAt < time.Now().Unix() {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	// 2) Отдаём index.html из папки profile
	http.ServeFile(w, r, filepath.Join(profilePath, "index.html"))
}

// logoutHandler: обнуляет токен и отдаёт страницу с обратным отсчётом
func logoutHandler(w http.ResponseWriter, r *http.Request) {
	// Удаляем куку
	http.SetCookie(w, &http.Cookie{
		Name:     "token",
		Value:    "",
		Path:     "/",
		Expires:  time.Unix(0, 0),
		MaxAge:   -1,
		HttpOnly: true,
		SameSite: http.SameSiteLaxMode,
	})

	// Отдаём HTML с JS-таймером
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	fmt.Fprint(w, `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Вы вышли</title>
  <style>
    body { font-family: sans-serif; text-align: center; margin-top: 50px; }
    #count { font-weight: bold; }
  </style>
</head>
<body>
  <h2>Вы вышли из учётной записи</h2>
  <p>Перенаправление на главную через <span id="count">3</span> секунды...</p>
  <p><a href="/">Перейти сразу</a></p>
  <script>
    (function() {
      let count = 3;
      const span = document.getElementById('count');
      const timer = setInterval(() => {
        count--;
        if (count >= 0) span.textContent = count;
        if (count <= 0) {
          clearInterval(timer);
          window.location.href = '/';
        }
      }, 1000);
    })();
  </script>
</body>
</html>`)
}

// createAdminUser: создаёт админа, если нет
func createAdminUser() {
	hashed, _ := bcrypt.GenerateFromPassword([]byte("admin123"), bcrypt.DefaultCost)
	admin := User{
		Email:        "admin@example.com",
		PasswordHash: string(hashed),
		Role:         "admin",
		FullName:     "Admin",
		IsActive:     true,
		CreatedAt:    time.Now(),
	}

	var exists bool
	err := db.QueryRow("SELECT EXISTS(SELECT 1 FROM users WHERE email=$1)", admin.Email).Scan(&exists)
	if err != nil {
		log.Fatal(err)
	}
	if !exists {
		_, err = db.Exec(`
			INSERT INTO users(email,password_hash,role,full_name,is_active,created_at)
			VALUES($1,$2,$3,$4,$5,$6,$7)`,
			admin.Email, admin.PasswordHash, admin.Role, admin.FullName, admin.IsActive, admin.CreatedAt,
		)
		if err != nil {
			log.Fatal(err)
		}
	}
}

Файл: C:\dev\projects\html\Курсовая работа\middleware.go
package main

import (
	"context"
	"net/http"

	"github.com/golang-jwt/jwt"
)

// ключ для контекста
type ctxKey string

const (
	ctxKeyClaims ctxKey = "claims"
)

// Claims — ваша структура из main.go
// убедитесь, что она совпадает по имени и полям
// type Claims struct {
//     Email string `json:"email"`
//     Role  string `json:"role"`
//     jwt.StandardClaims
// }

// getClaims извлекает *Claims из context, записанных JWTAuthMiddleware
func getClaims(ctx context.Context) *Claims {
	if c, ok := ctx.Value(ctxKeyClaims).(*Claims); ok {
		return c
	}
	return nil
}

// JWTAuthMiddleware проверяет JWT и кладёт Claims в контекст
func JWTAuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		cookie, err := r.Cookie("token")
		if err != nil {
			http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
			return
		}

		claims := &Claims{}
		token, err := jwt.ParseWithClaims(cookie.Value, claims, func(t *jwt.Token) (interface{}, error) {
			return jwtKey, nil
		})
		if err != nil || !token.Valid {
			http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
			return
		}

		ctx := context.WithValue(r.Context(), ctxKeyClaims, claims)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// RequireRole — позволяет только одной роли
func RequireRole(roleAllowed string, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		c := r.Context().Value(ctxKeyClaims)
		claims, ok := c.(*Claims)
		if !ok || claims.Role != roleAllowed {
			http.Error(w, "Forbidden: insufficient role", http.StatusForbidden)
			return
		}
		next.ServeHTTP(w, r)
	})
}

// RequireAnyRole — позволяет любым из списка ролей
func RequireAnyRole(allowed []string, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		c := r.Context().Value(ctxKeyClaims)
		claims, ok := c.(*Claims)
		if !ok {
			http.Error(w, "Forbidden: no claims", http.StatusForbidden)
			return
		}
		for _, role := range allowed {
			if claims.Role == role {
				next.ServeHTTP(w, r)
				return
			}
		}
		http.Error(w, "Forbidden: insufficient role", http.StatusForbidden)
	})
}

// CORSMiddleware разрешает запросы с 3000 и 8080 и обрабатывает preflight
func CORSMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "http://localhost:3000" || origin == "http://localhost:8080" {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Accept")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		}

		// На preflight-запрос (OPTIONS) сразу отвечаем 200
		if r.Method == http.MethodOptions {
			w.WriteHeader(http.StatusOK)
			return
		}

		next.ServeHTTP(w, r)
	})
}

Файл: C:\dev\projects\html\Курсовая работа\server.js
// server.js
const express = require('express')
const path = require('path')
const { createProxyMiddleware } = require('http-proxy-middleware')

const app = express()
const staticDir = path.join(__dirname, 'static')

// 1) Все запросы на Go-бэкенд
app.use(
	createProxyMiddleware({
		target: 'http://localhost:8080',
		changeOrigin: true,
		ws: true,
		// здесь мы указываем, какие пути проксировать на Go
		context: [
			'/api/**',
			'/login',
			'/register',
			'/logout',
			'/profile',
			'/api/*',
		],
	})
)

// 2) Раздача фронтенда
app.use(express.static(staticDir))

// 3) Редирект / -> страница приветствия
app.get('/', (req, res) => {
	res.redirect('/welcomeMainPage/index.html')
})

const PORT = process.env.PORT || 3000
app.listen(PORT, () => console.log(`Frontend → http://localhost:${PORT}`))

